      >> I'm here on stage because there's something you need to understand about where we are.  We are located -- if you're really good at golf, you could probably hit a golf ball to Canada right now.  And if you have a cell phone, and I know you all have cell phones, you might accidentally roaming on a Canadian wireless carrier right now.  Yeah, go Rogers, go all those carriers.  They're actually really excited that that's happening because data roaming is mad expensive.  And we would hate for you to rack up some crazy bills by accident.
      So the easiest thing for you to do is turn data roaming off; right?  Go into your phone, make sure data roaming is off, and you'll be totally solid.  And you should be able to connect your phone to the Wi-Fi network, so you should have access to plenty of data here in the ballroom and around the resort.  But please to make sure to turn data roaming off.  Awesome.
      ¶¶¶
      Hello, CascadiaFest! The livestream captions can be followed on your handheld devices at 2015.cascadiajs.com/captions.
      [Captions provided by @chaselfrazier @whitecoatcapxg. Thanks to our sponsor @mobify!]
      >> Welcome back.  We're going to get started in just a minute.  So if you want to find a seat, I would appreciate you.
      And we're going to go through a few more haikus, and if you haven't been following on Twitter, that's something you should do, they are both breaking my heart and making me happy today.  Maybe the best idea I've had.  I think I can quit tech now.
      First one in a very dramatic tone.  The box is floating.  Position is relative.  Cascading gently.  Declare and select.  Focus on what's important.  Pretty solid.
      Much like window blinds, the more you change position, the more you suffer.
      Painful I think is a common thread here.
      So our next talk is something I'm also very, very excited about.  I voted so hard for this talk when we were selecting talk proposals.  So without further adieu, this is Gregor Adams, and he will be talking fractals with CSS.
      [clapping]
      >> So, hey.  Yeah, awesome to be here.  First off.  It's a pretty, I can almost not seeing anything, but what I can see here, it's pretty crowded.
      "Exploring Fractals in CSS."
      By: Gregor Adams. 
      >> So what you can see up here, actually I wanted to start this talk with some examples of mother nature, because what mother nature gives us is sometimes so impressive.  For example, the Romanesque broccoli, just looks super amazing.  So this is basically a cone shape and the surface of this cone has just a lot more cones, and it just keeps on going and going.
      If we look at lightning, it bursts in any way direction find because it's looking at the path of least resistance.  And if we look at the arhythmic spiral.  And if we look at a tree, we can see it has so many secondary branches that we actually fail to count them.
      And all these things have one thing in common.  They are what we call fractals.  And my name is Gregor Adams, I'm from Germany, I'm curtaining relevant currently moving to the states, I'm into art, music, and some might know I'm pretty crazy into CSS, so I'm going to be exploring fractals with CSS.  And just the short reminder, the pictures and the background you can see these images have been generated with CSS, they're based on the fractal logic that I have been creating in the last month.
      So basically what is a fractal?  I get this text from Wikipedia, so basically fractal is a natural phenomenon, that's basically what we saw in the pictures before.  And it's a mathematical set that has a repeating pattern.  So this tells us through math we can actually create fractals.  And there's one other thing with fractals, if it's the same scale, it's called a subsimilar pattern.  And some are subsimilar, some change the pattern at different scales.
      Very good example for fractal that does change the appearance at different scales, it's also probably my favorite fractal because of the size it actually has.  The fundamentals have actually existed since 1902.  But it did not get that popular until 1980, actually released a study.  Since that day it's actually named after him.
      And some of my slides do have these links here.  So they will open up a page, and this one goes to reseda code, it's like Wikipedia, but you can put algorithms in coding midges.  And what I did was implemented the algorithm in CSS, and it's also now on -- you can actually find it on that link.
      So for this talk, especially, I decided to do something different.  Every single demo that I have for you is going to become live in the browser, sometimes it might take a while, sometimes it may not work, I'm not entirely sure, I have been working for a month on this, and sadly I didn't have time to practice.  So let's just hope that this works as a I want.
      So, yeah, basically this is already, like, okay.  Let me just get this a little smaller.  So basically this is the entire algorithm.  I'm not going to go into it in detail because I basically don't have the time.  But what I'm doing here, I'm live compiling the algorithm on one element with box shadows, and just to somehow -- whoops.  That's not supposed to happen.
      So what I can also do is instead of doing this in gray scale, I could also do this in color.  And this is going to take a while because it's being live.  Thanks to ellipses, I can now do this in the browser, that's pretty exciting.  And what I can also do is I can zoom into this.  And further I zoom, the more detail I get.  So if I would say I go to 0.5, I can see actually this black spot -- what it actually is the lake, so I can change a few properties in here, and this is going to zoom in to exactly that spot.  So what I'm doing is adding some reiterations and locating the zoom point, and it should change.
      Yeah, so this is a zoom of -- what is it?  60, 600.  To actually this.  And this is pretty nice.  But actually fractals started a lot earlier, so the first guy to actually implement a fractal was canter, he's a German mathematician, and he's basically the inventor of the set theory, which is a fundamental theory in mathematics, and he introduced canter set in 1883.  So his example was just basically a line.  What he did was split it in three parts and just removed the middle part.  And then he kept going and going, and basically what happened is this blew his mind because he was, like, okay.  So I have an infinite number of lines, each with an infinite number of points, and he didn't get it.  So he checked into a cemetery -- he did.  Not only because of those reasons, basically because the people were, like, you're crazy.  This can't be happening.  So, yeah, he checked in, and he figured out he was not crazy.
      Another very famous mathematician was Ka, and he made one of the most famous fractals, it's the snowflake, and it's base on the Ka curved, and this is a fun one.  So what this does is in the beginning we have just a simple line, you might not see it because it's going to be a small white line on the bottom.  Yeah, you're not going to see it.  So instead of removing lines, he added lines.  So he said he's going to split the line into three parts, and then he's going to take the middle part and rotate it by 60 degrees and then just connect the more iterations he used, the more detail.
      Let's go one step back.  So each side is going to get the triangle and this just repeating.  We can R what we can also do with this logic is if we were to say, for example, we want to shift the coordinates of the triangle.  And let's say we move this over here.  And then take some more iterations.  And then we're actually replicating the shape.  So the deeper we go, the more detail we're going to get.  And this we can go really crazy on this.  So the flatter we make it, it kind of looks like a terrain or surface or something, and the higher we go, the more it's going to look like a star maybe.
      Yeah, he seems to be funny.  I love this picture.  I actually do love his pictures.  His name is Michael barnsly, he's a -- actually what he did was he founded a corporation, which is basically just about fractals, and he's really big on the iterated function system.
      What he did was implemented the firm, which obviously I also implemented in Sass.  Yay.
      So basically what this does is it takes random numbers and then it runs a few algorithms and depending on what the random number is, it just positions the dot on a certain spot.  The more iterations I run -- this might all take a little.  The more detail I'm going to get.
      I've done this one with Ruby Sass with 100,000 iterations, and it took two and a half hours to compile.  I haven't tested it on Sass yet.  Also the only reason I'm able to do this is lip Sass 3.5 shift, so thanks to all the Sass people.
      And there are basically two different systems to draw fractals, it's the iterated function system and the limp Meyer system.  It's basically the system that's used to draw, and it can also draw a triangle and, for example, the firm.
      And, for example, the snowflake is a very good example for the limp system.  Another good example is -- okay.  So I figured this might happen because the screen is so small.
      So the triangle.  Basically what we're doing is we're starting with a triangle and then on the sides we're just ago a new triangle.  And there are different ways of drawing this, so you can draw this from the inside out and what I'm currently doing, or you can draw from the outside inwards.  So if you know about fractals, and you're like this isn't correct, this is correct, trust me.
      So the deeper we nest this, the more detailed we're going to get.  And we can just keep going and going.  And with all the stuff I'm doing, the more dom I'm taking, the more detail I'm getting and the CSS is never being changed.  Here's another one I'm also going to make smaller.
      So here's another example of an out shape, and if we nest this, we basically get a lot of L shapes that just wrap around and from the space.  And we keep repeating this over and over again.  By the way, the slides are already online, and they're online with the live editor, so later you can actually play with this online.
      And I've done a few things, this is something I just came up with.  So you can -- with the out system, you can really easily draw really nice, repeating patterns.  So this is another example the deeper we go in this, the more detail we're going to get.  And I just put this in mere so later people can actually play with it.
      Here's another pretty fractal.  That's basically just a bunch of circles.  And what I'm doing is positioning the circles on the border.  And then keep repeating that.
      So now the funny thing is on this example if I take three circles, so I leave one out and keep doing that, and then the next thing I would do is -- well, let's actually keep them like this.
      So now if I take a lot of these elements, we're going to see a shape that we have seen before.  And this is actually the triangle.  And the expensed key triangle, it has appeared to me like in so many things that have done, I wanted to do something totally different, and I keep getting this shape.  So.  It's -- I kind of got the idea how expense key originally got the shape because he got four squares and just deleted one, and he keeps going and the shape just appears.  And it's actually pretty funny.  I realized that -- I've been doing fractals quite a while, and I just realized that, like, two or three months ago.  So I was, like, okay.  That's how it works.
      We can actually do pretty artistic start with the out system.  So I think you might not see this in detail.  What I'm actually doing on this, I'm kind of tricking the browser, so this thing is super huge, and I'm down scaling it so that I can get more detail on this.  And what we can also do is take the fractals to the third dimension.  This is -- I think I did this example last week.  This is especially for Cascadia.  I think on my last talk I was asked if I had ever done 3D stuff, and I mentioned I had done 3D stuff with fractals, but it's basically the problem with these super complex things in 3D is that it just takes a lot of dom, and it's really hard to nest.  If I were to nest this one deeper, basically the -- the rendering would totally fail, and it would just crash the browser.  So sadly we're kind of limited to that.
      And then -- yeah, we can also just take shapes and repeating the shapes, for example, taking a pentagon and repeating that over and over again, we actually get -- taking a pentagram, we get a pentagon, and we can do this with other shapes.  So if this were a hexagon, it would Henderson in a hexagon shape and so on and so on.
      And with all that logic, all these slides, they are generated with CSS, all the slides have the link on them, so you can click.  And I'm just going to look through all these examples so I can see what I have generated with CSS.  I would have loved to put this on, like, live, but there's -- super heavy and definitely crash the slides, so I can't do that.
      So as you can see, for example, in this -- we can do some really, really funky stuff and actually doesn't really look like CSS anymore.  It's more like as if it were done in Photoshop.  And the fun thing about this is that the code is super, super compact.  It's super easy to maintain these things, and super easy to just get new ideas doing this.
      This one I really like because it kind of looks like you were falling into this cave or something.  So I have seven minutes left.  I'm going to -- I have two things that I want to show you.  Basically there's one thing -- this is basically how I started doing fractals.  So in the beginning, I basically had one branch of a few elements that I would just position on top of each other and then rotate.  And -- okay.  Let's start definitely.  Let's start like this.
      Okay.  Sorry.  So basically what I did was basically in the beginning I have one branch.  And to not have to duplicate this, I figured I needed some logic to actually -- from this branch, and luckily Webcade implemented something a few years ago which is called WebKit box reflex, and just by adding this property, I'm now able to, like, just take the element and mirror them and while I mirror this, all the children are also mirrored, so I got this super big fractal.  I started doing this, and then obviously I started doing animations with this, so I put some simple animation on this, and I got -- let's make this a little slower maybe.
      So basically I got all these awesome shapes.  And I -- so the next thing I did was I said depending on how deep the nesting is, I want to change the background color.  So I was able to do something like that.  And then the next thing I did was, say, depending on the depth I want to actually put some -- change the duration of the different elements.  So I said okay.  Let's just change that.  And this led me to something that actually created these kaleidoscopic, like, visuals.  So what I did after that is actually you think about -- and I got this idea from the JSconf in Berlin because a friend of mine and I had a talk, and he did some audio visualization, and I thought okay.  I have combine that.  So I got with him and basically implemented this audio visualizer and -- it's also in code pen and what I did with cross policy in Chrome I'm now adding -- I added the local audio stuff so you can just take any local audio and put it in and basically I have no idea what song this is.  So let's just play it.
      ¶¶¶
      Yeah, we don't do anything to scare your children.  That's the last thing we want to do.  We don't want to scare anybody.
      >> Yeah, so I hope you were able to see that.  If you didn't see that because it's -- the contrast is not big enough, just look at it online.  You can see -- so this is the URL, so it's slides dot pixelesque.com/CascadiaFest2015.  And another link down here it's just a link to a collection, I think I have 50, 60ish fractals of some of the examples you saw and, yeah, it's basically a lot more.  And also make sure to follow me on Twitter, I'm @GregorAdams, and you can just find me under pixel ask.  Thanks.
      [clapping]
      >> If you've never live demoed something, I will say that it is incredible hard and challenging, and you don't even look that sweaty.  Well done.  Well done.  Just another round of applause just, like, a little one.  I'm waiting.  Just kidding.  That was supposed to be funny, guys, come on keep up.  Rude.
      He doesn't want to talk to me.  That's cool.  Whatever.  
