      Hello, CascadiaFest! The livestream captions can be followed on your handheld devices at 2015.cascadiajs.com/captions.
      [Captions provided by @chaselfrazier @whitecoatcapxg. Thanks to our sponsor @mobify!]
      >> Hello, again.  Did everyone enjoy the tacos?  Taco dine?  Taco lunch.  Thank you to SauceLabs for the tacos, I do enjoy tacos quite a deal.  I think we have some people still filing in after lunch.  Hopefully we don't fall too much into food comas because that happens after lunch, and we get sleepy.  But try to perk yourself up, stay awake for our next series of talks, which are going to be great.
      I just want to remind you that tonight we also have a movie night going on.  It will be at 10:00 p.m.  Same place as last night.  And I am promised there will be dinosaurs, and we all love dinosaurs.  So keep your eyes out for that.
      Let's see.  I think we're all kind of, like, settled in.  So let's go for it.  Let's get started.  Our next speaker kicking off the afternoon talks is Courtney Hemphill.  She's a partner and tech leak at carbon five in San Francisco, and I'm very excited to introduce her to the stage.
      "Algorithms for Animation - Simple formulas to activate your UI."
      By: Courtney Hemphill.
      >> Hello, everybody.  Thank you for joining me after lunch.  Feel free to filter in and just sit on down.  And I want to say thanks to the Cascadia folks.  This is really kind of an amazing conference.  I think there's great that there's families playing in the backyard, and we get the view of the ocean.  I'm psyched on all of that.  Yeah, so I'm Courtney Hemphill I've been a developer, I've been a developer for eight years, and I'm talking about algorithms for animation.  And the point of this talk is to get around the core factors that are involved in animation from the design as well as the development side.
      And my intent with this talk is twofold.  I see a ton of sort of design on one side and development on the other side and not a lot of sort of conversations happening in between.  We sort of are lucky at the company that I work with because they sit together.  They actually pair together.  So we have developers and designers sitting next to one another and really pair developing the applications and so they get to tweak things in the interface in a really dynamic fashion.  And they've developed a language with that.
      So my talk is about how to get a common language and how can you give developers on one hand understanding a design principles and then from the design side, how can you give designers a little bit of power against producing something in a working interface.  And I'm curious.  Who here is a designer?  Full out designer.  Sweet.  One person.  Two?  Who considers themselves to have design chops.  Maybe you're a developer.
      Everybody is a designer, I feel like I was a developer my whole life.  But I enjoy design, I'm not going to say I'm a designer, but I like it, I like to play around in the viewer layer.  So that is something where I've been able to have a lot of conversation with designers around what are the process that you use and the ideas.
      Who here feels like they are a full stack developer and what I mean by that is, you know, you sort of go from the view all the way down to the server side?  So it's a pretty good chunk of you guys.  I kind of think it's the same thing with design.  I think there are designers that are never going to want to touch code.  It's not the way that they envision.  But there are designers that really -- they're curious.  They're, like, what are these tools that I'm designing for?
      So this talk is a little bit for them.  But I'm going to start all the way back years and years talking about talking about Disney.  So a long time ago there were these 12 guys, they call them the old guys of Disney.  But these were the first creators of animation, it was cartoon animation, and they called them principles, and it was their way of translating our world into a pattern you could use for cartoon animation.  And the method they came up with is with a we're used to.  The flip book; right?  They would have their Rockstar designers come up with the key frames and the interns come in and provide the frames in between the key frames.  And that became the cartoon so what we know now is those people creating the frames in between, those were the inbetweeners, and now we have algorithms that provide that betweening.  They interpret what is going to happen in between.
      So speaking of dinosaurs, this was the first cartoon created by Disney by a guy named Windsor.  And really if you look at sort of a straight static image, it's not that interesting, but she became their first star and she's characteristic, you know?  She's got life, an emotional resonance with her and everything becomes interesting when you add animation.
      And the cartoons were way more smooth in their motion than the Charlie chap lins by the day.  The were frame by frame technology and for the technology back then it was janky.
      So animations really they serve as cognitive aids.  The transitional Internet that we're used to, there was lots of text used in order to communicate to users how the heck they could provide a website.  So today we are finding that motion is something we humans can respond to, and we can use that as a powerful tool to get users to understand what we want them to do with a product that we're creating.  And it can be airmobile site, a website, an app People's No. but motion is the thing where users can key in and without having a bunch of help bubbles and bread crumbs, we can testimony how to get through our interphase.
      So there's a lot of great resources now that you can use, IOS design resources, and there's also metro UI CSS that has some great patterns.  But it all comes down to what actually feels right to us.  And it's all based in reality.  And what we sort of see to be natural objects in today's world.  So Don Norman writes about this in his book the design of everyday things.  And there's this notion of afford answer, and affordans is how we understand something to have a physically property.  So if you sit in a chair, you know it's going to be stable, it has four legs, and if you pick it up, it's going to be heavy on the back because of the back, and it signifies to us what we can use that object for.  And the same thing translates over to user interfaces.  And the best design is you don't tell people what they can do.  They're using the affordance to signify what they can do next.
      And humans, we actually have crap perception of color in our peripheral vision.  So most is something that when we load up a Web page, you can scan through the center Colombia, and you can find colors and patterns that you should probably key into.  But in your peripheral vision, you pretty much ignore everything.  Motion is something that can bring your vision exactly where you want your user to be.  So it's an incredibly powerful tool to say, hey, look over here.  This is sort of your next step.  And animation is also great because you can because I have your user a logical map of where things lie in the interface.
      So for the mobile phones, you can navigate pretty effectively in most apps now in all different directions.  And you know where to go.  You know left is going to give me to this landscape and right is going to get me to another one.  Societies powerful for us to do navigation without having the transitional drop down.
      So I'm going to go through a couple of pretty common examples of what we see today.  And this is something that we're all incredible familiar with.  This is the auto lowered that we've seen in Pinterest, and for us to load in new content without having to reload a new page.  The ability for people right now to be patient is pretty much zero.  So having them to be able to play with interfaces and figure out that there's this animating playfulness that they can experience and explore the interface as opposed to having to wait for things to load.  If you can keep your user doing something, they're likelier to stay on your site for a longer period of time.
      And then the other thing is motion can really enhance a brand as well, and it can give user immediate feedback.  So we're telling our user really quickly here something very blatant.  You're wrong.  I get it.  Totally stated.  But if you tell them in a manner that's a little bit more playful, they're a little bit more engaged with what you're doing with them.
      And then navigation is a great one.  Who here has seen a bread crumb in a website in the past month let's sayer?  Still?  Jesus.  Well, I want the death of bread couples to happen.  The hamburger menu does going to have its day and go away.  But the idea of navigation humans, we have this ability to map out and find context.  So if you can allow your users to explore your site rather than force a structure on them.  They're going to have more fun, and it's likely they're going to be more engaged in continuing to use your site.  So navigation -- this is something that we all see.  This is sort of the old school you jump from one page to another you know how to get back to it.  But giving someone a little bit more of a context about where they're going, and I sort of alluded to it before.  You know, with mobile apps now being able to swipe in different directions, giving them, again, sort of this overall of where things lie.  Super powerful.
      So this is the one that I actually love.  Reducing cognitive load on your users is huge.  Just don't show me anything that I don't care about right now.  You can ask yourself for a ton of information.  We've done apps where it's bringing in people through huge funnels where they're applying for a loan, and they've got to put in all this information.  They're not exactly against putting that information in, as long as you're telling them what they need to know in realtime.  So reducing that cognitive load and allowing them to understand okay.  What am I entering?  When do I need to do it?  Telling them they're wrong but in a friendly manner.  These will continue them moving forward.
      And one thing we found while developing this app was we initially tried to design with all these different images on it, and it was really beautiful.  But then we split tested it, AB, with this idea of a piggy bank filling up as they moved through this funnel, and they loved it.  This piggy bank was this tiny icon that everyone loved watching the piggy bank fill up.
      And context is the final one.  Keep your users continually informed.  Let them know if they're waiting for any manner of time, let them know why they're marine.  This was done by tweetie, but Twitter bought them and took them over.  But it was patented and pulling them down and the content is loading, they let you know, and letting you know if there is no content.  Super quick notion by the user.  They don't have to do a lot, but you give them a lot of information.
      And people also like the pulling of the lottery, you know, the slot machine and being able to get that feedback loop.  Sort of we're now in this pattern where it's, like, we can scroll to our heart's content with Instagram and we love it because we give in that sort of bonus.
      So how do you communicate?  These are ideas that are existing right now.  These are patterns that are pretty well known.  There's tons of ideas back and forth how we can improve our interfaces with motion.  So how do you communicate those as a designer that's not playing with code?  And the reality is it's just with a little bit of math.  And having an under lying notion of what the actual patterns are with animation and how you can communicate with developers and speed it up or slow it down, all that can be communicated easily, and you can play around with it in a browser in a easy fashion.
      So I am definitely not good at math.  I'm a developer, but I would not be the one writing crazy algorithms.  And there are insane algorithms that people write for animation.  But really it's really simple the one core formula that you need to animation.  And this is not it.  Is what you need actually the most simplistic way that you can move things.  And in this way, you know, okay.  We're animating, but this is definitely frame by frame thing, and we need to give this formula so much information.  Where do you start?  Where are you going?  What exactly are you changing?  This is, you know, pixel based, and we just don't have a lot of power to alter this function.  So we're achieving the end to the means that we want.  We're animating something.  But we really can't manipulate this very much.
      And it's certainly is a rather boring version of motion.
      So interpolation is the core of animation.  And it's really this whole idea of percent change.  So to make things appear realistic interpolation is the algorithms behind creating things in a much more organic fashion.  So people have used really wacky algorithms, interpolation algorithms to do things, like, make individual pieces of a face move in different ways in cartoons.  And they'll even do this for hairs, like, individual hairs in movies these days will actually have different algorithms behind their movement.  And it's all in an effort to make things look more organic and make them more like reality.  And, again, it's just based on this idea of the change that we want to have happen and then the percent complete.
      So we're breaking everything down to something that can be measured against this range from zero to one.  So if you take a number between zero and one and you multiply it by another number between zero and one, you get had it magic thing.  It's still a number between zero and one.  So we can do a lot within the function, we can slot a lot of things, we can change just not distance, shape, morphine, color changes, now all of a sudden we can use this one formula, and we're creating this animation, and you'll see we are starting to make this a little bit more interesting.
      And the reason this is boring is because we're just doing a linear animation.  And we all know -- it's not something we see often.  Linear movement is the exception in our world.  And I love this term.  The guy who really they credited as being the guy for nonlinear science, they came up with this notion of -- or they started really the study of nonlinear science.  But he has this great quote which is, like, using a term like nonlinear science is like the study of animals.
      So we can all realize that reality, it's organic, you know?  Our natural measure of the world, it includes torque and you're never going to see animation unless it's in a vacuum.
      And interestingly enough, physics can really have us be able to mimic that same thing using easing functions and these different algorithms for that interpolation bit.
      So literal we're starting at the same beginning and ending at the same place, but we're changing the rate at which we're progressing through that zero to one range.
      So changing the property, that float is where we're change the algorithm, and that float can get super interesting, and we give it a beginning value, but it completely changed the way in which we see the animation happen.  So now we start to put in more interesting functions there.  We're going to put some power functions.  And this is our Ferrari.  So we get to see a little bit more of an interesting animation.  And who doesn't love a Ferrari?  But that is actually jarring.  One of the things they say in Google material design is if you have something enter a screen and it's speeding in and stopping right in front of you.  It's a little bit awkward.  It feels a little bit weird and users are going to have a natural reaction against it.  So oftentimes this is the one that we see a lot more.  This is the easing in.  So, again, it's not the most exciting thing, but this is under lying all of the frameworks that you may have used.
      And the other thing it can start to get even more interesting.  So although that doesn't look like dramatically different, these are the things where you can have brand guidelines around these specifically -- the specific algorithms that you're using for the motion in your interface, and it's -- the devil is definitely in the details.  You can have things that are a little bit too jarring for a user and change things very subtly, and it will look like a more natural motion.
      So the other thing that is pretty fun is this whole notion of follow through.  So I talked previously about the Disney sort of 12 -- 12 animation -- now I'm totally forgetting.  12 ways that you should bank account motion and the ways that you can translate them into interfaces.  Follow through is one of them.  So I've been talking about this idea that zero to one range being a thing.  You can actually go beyond that zero to one, and this gives you the notion of follow through.  So much like in our everyday world, you're not always just moving and stopping at a place.  Oftentimes you may be go back, and you need a little bit.
      So it's getting a little bit more complicated and you're, like, how do I figure out what algorithm does what?  There are tons of places on the Internet that give you these different algorithms that you can slot in.  And this is the exact same function I'm using over and over again.  You can start to put in really crazy algorithms and you can also do it in a pandered way.  So you can actually not only come up with guidelines for a user interface that has to do with for not size and color pallet and line space, you can create this whole next to warranted different interactions that can happen.  And you can build these into a CSS framework or a JavaScript framework so people can slot these in.
      So we've done projects where there's this intense code base underneath the product that we're working on.  But you can create these nice prototyping layers by creating parts around all of the things that I talked about.  If it's for not, if it's color, if it's these different visual elements and animation should now be one of those elements.  And it's giving designers and the front-end team all of the tools they need to play around how they can slot in these different elements and really keeping with the same constraints that will be represented across the whole interface.
      So the last adversity gets to be really fun.  And there's a way to use animation and there's a way to not.  So much like the blank tag.  If you have bounce everywhere, it's going to really start to get annoying to you.  So there's a place to use animation and there's a place where it feels good and there's a place where it starts to feel walk ward.
      So testing with your sources is huge.  And there's a lot of different ways you can put interfaces in front of people and just get their insight.  We oftentimes do user testing, and we'll bring people in and basically be, like, how does this feel?  You know, does it feel cohesive?  And that whole thing I was talking about before.  You can provide a lot of different tests to users to see if they can intuitively figure out your interface.
      So something that's interesting for us is AB tests against sort of elements that you can introduce and figure out which one users go to and which ones they completely ignore.  And something that's common on mobile now is it's really a pain in the bullet butt.  Particularly with all the device sizes to find the buttons with your thumb.  It's a lot easier with the swipe thing.  And now noticeable is going to be a lot different than your website.  But if you have a mobile app that you're working trying to use swipe and motion of the user's thumb more than redirect their thumb somewhere.  It's a much more natural interaction, and they love to explore with it.  That's what we've found.
      So this thing always tends is to stop playing right when I get to the slide.  But this is something that was created by one of the developers at carbon five.  And he used all those functions that I just showed and to create this thing that sort of looks like anyone can guess what this kind of looks like?
      Birds on a wire.
      So the natural interactions of the birds, he did, you know, a lot of this was just figuring out how close they were with one another and having these functions to where they would bounce up off each other.  And he ended up tweaking with this for quite sometime but he came up with this feeling that they were birds and when they hit one another, they had this natural interaction, and they kind of bounce away.
      So I'm going to talk really quickly about some tools.  So I want to reiterate that and there's not a ton of designers at this audience, and I've often given these talks at design conferences and they're, like, I don't want to have to deal with the algorithms.
      There are interactions, motions, and in an interface without having to touch code.  And these are good ones that I've seen our designers use.  And you can use this in the way in which you're sort of doing that big picture, like, how do I want some of these animations to work?  And then these can actually get ported into code.  So oftentimes this is one of the designers that likes to dive into CSS and JavaScript and they'll sort of port that over.  Or this is literally a developer sitting down with a designer and pulling these things into CSS.  These, again, are great materials to use, though.  The material design light, they have a whole section on animations.  And they've got great sort of constraints for you, if you need the constraints, but they also have ways that you can really flex it.
      So I highly recommend checking that one out.  And honestly CSS animations are dead easy, most of the code is written for you and they're easy to drop into an interface.  I'll talk about the tradeoffs for JavaScript and CSS.  But here's some of the frameworks that we've actually used at carbon five.  I would say the one that seems to be the most performant is GSAP, the between JS is a little bit more lightweight.  And thens performance things.  There's continuous conversations around JavaScript and CSS performance, and the answer is it depends.  So CSS can be great if what you're doing is just shaking a button or sliding something in.  If you need to have that tether to some sort of reaction that's going to happen on another element, then you should start looking into JavaScript.  But you can really play around a lot with just CSS, and that's going to be probably the most performat thing.
      So that's what I have to say.  Please go fourth -- if you have any comments against talk or if you have any additional things to add, I would love to hear them.  I'll be around today and tomorrow.  So thank you so much for your attention.  Enjoy the rest of the conference.
      [clapping] 
