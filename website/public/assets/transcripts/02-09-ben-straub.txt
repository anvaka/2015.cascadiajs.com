      >> Cascadia.  Yay.
      >> Someone forgot her microphone somewhere.  Thank you, Allen.
      >> Thanks.
      >> Do you have any tips on how to embrace chaos?  Peace in the fire.
      >> I think to some degree to me the way I embrace the chaos and the way I've come to terms with it.  If it seems I have a lot of anxiety about this, I have less than I used to because understanding why people are going around creating all these frameworks has helped me be less frustrated with it.
      >> Okay.
      >> But as far as people creating frameworks, the thing that helped more than anything for people who are consuming the frameworks is to tell people what they're supposed to be good for, and then they can know what part of the chaos that framework living in.
      >> Okay.  So finding the context of why things came to be and putting that context forward for your potential users.
      >> Yeah.  Exactly.
      >> Sounds great.  Thank you so much.
      >> Thanks, guys.
      [clapping]
      "Hacking Culture with Javascript."
      By: Ben Straub.
      >> Ben is an engineer, he hails from Portland, and he is not taking sides on the coffee debate.  So let's hear it from Ben.
      [clapping]
      >> I just don't have nearly as good an answer to that question as John did yesterday.  So I'm standing.  Like Lydia said, I'm Ben Straub I'm Ben on GitHub and Ben Straub everyone else.  I helped write a book at GIT, I used to work at GitHub, and now I work at Gridium where I'm learning even more how remote teams work.  And I'm not here to talk about any of that stuff.  Right now I'm here to talk about robots opinion.
      Now, everyone in this room wants a robot whether you know it or not.  Because robots are awesome.  They never get tired or distracted.  They don't care how dirty a job is.  They handle things you don't want to do or that you would get tired and screw up.  The problem is they have this PR problem, and that is when I say robot, you're thinking of something like this.  Or maybe this.  And the way this whole robot thing worked out.  We didn't get those.  We got this, and we got this, and we got this.  So robots are all around us.  They even live in our pockets.  They don't look the way we thought they would, and sometimes they're pretty dumb.  We have to expect our expectations.  Where's my flying car kind of thing.
      But let's not waste a lot of time wishing they were something else.  As a wise man once said, you don't go to war with the army you wish you have, you go to army with the one you have.
      And this is Hugh bottom, he can help you write software, not the way you imagined as a kid, and the way you're imagining right now, and he's still helpful and he's the key how he could change your company's culture for writing code.  There's one thing you do have to remember, though.  And that one thing is that software is terrible at making choices.  Where it's really shining is doing a boring thing lots and lots of time.  Now, think about the way that you make software.  If there's any part of it that's repetitive, and there's a spot for you to fire yourself and put a robot in your place because you're going to make mistakes and that robot won't.
      So I promised I would talk about robots and culture.  But humans are really tricky, really complicated, culture has lots of inputs and outputs and any change is going to have an affect.  And whatever affect that is mostly unpredictable.  So, unfortunately, I can't do an if this than that thing up here for you.
      What I can do is go through a thought experiment for you so that you can start figuring this stuff out for yourself.
      So here's a method that we're going to work through of how to onboard a chat robot as a member of your development team.  I've seen this method work.  I've seen it work at GitHub and two teams since then.  Step number one is to get some chat software.  Even if your team is all in the same physical room every single day.  Have them get into a chat room.  I guarantee once your team starts chatting, you will see a behavior change within a week.  You'll get less e-mail, you'll have fewer meetings.  It's a beautiful thing.  And the reason this happens is chat is preferable to e-mail and meetings.  And the reason why -- and here's a very important thing to remember.  Any cultural changes you try to make in a company or a team of people trying to get things done.  The new thing needs to be easier and better than the old thing.  If it's better but harder.  On anybody will use it.  If it's easier but worse, everyone will use it.  But you'll want that.
      So it won't stick unless it is easier and better.  So back to chat software.  My current favorite is Slack, that's what my team uses, but it doesn't which of these you can get.  You can even stand up an ICC server if you want that control.  Again, the main idea is to start a chat.
      And step number two put a robot in the chat room.  Here again you have a few options.  Now, I've never been clear on some of these pronunciations.  I'm going to go with rewritten in Python, E in Ruby, and CoffeeScript.  And I said I wouldn't start any religious debates, but I think I just did.  So Hugh bottom is great, but if you're the only JavaScript hacker on your team or it would be harder to ploy, then use something else.  It doesn't matter which of these you're going to pick.  Just pick one, stand it up, and get in your chat software.  Now, if you're worried about cost, every single one of these is free.  You can use hosting, it's a node app, so open shift is popular right now.  Or you can piggyback off another service, on anybody will notice if you're running just an extra on the database server.  It's totally fine.
      At this point it's popular enough that most chat packages will have a happy path to go down when you integrate.  Slack makes this easy, you go into Slack and tell it want a bot, and you give it a key and you're set to go.
      If your chat doesn't have something like this, then you can set up Hugh bot with a robot, get him in there, get an account, get him set pick up.
      So now you have a robot in your chat room.  You should now be able to do this.  You address Hugh bot by name, you type ping, he should agreed with pong.  A whole lot more than this.  This is about the only command me has what he can do is organize in a set a plugins.  Which leads us to step number three.  Step three is to have some fun.  Turn on the plugin that lets you search for images and GIFS.  People need to get used to ask for Hugh bot for things and it's less dorky and fun to get people onboard.  Plus trust, people don't trust a robot to do important work if they don't trust to do silly work.  Once you built that trust, you can start doing real work done.  Pick one thing.  Just one thing, and automate it using Hugh bot.  Let the robot do it for you.
      Let me give you an example.  Who here uses continuous integration?  Anybody here use public shaming when the build breaks kind of thing?  Like, the mannequin that you put there that the person has to live the rest of the week.  It's the best thing.  If you haven't tried this, try it.  Everyone gets real careful about running the tests before they push.  It's awesome.
      So it turns out you can automate this kind of shame.  So Hugh bot can delivery a notification like this into your chat room the very second that the build breaks.  It's a I great way of came backifying continuous integration.  Because breaking the build once or twice is fine, everybody makes mistakes.  But you don't want to be that person on the team that's always breaking the build.  Don't be that guy.
      Here's another example.  This is how we can deploy our software to production.  The way this used to be done is two SSH hops, and then you would run a script.  Fairly simple, automated, and it took some steps, five or ten minutes.  There's a manual step or two in there.  So we would deploy once a day, once every other day or something like that.  This is 14 keystrokes.  It takes less than 10 seconds, and it happens five, six times a day now.  We're deploying constantly because we don't worry and everyone sees when something goes wrong.  Everyone knows when to drop and everything help out and fix the problem.
      For some of our projects we don't go this far.  And it shows up in the chat room whether or not it succeeded.
      So now you've got chat software, a robot, you've automated your first thing.  And the magical thing about the first thing you automate, is that you start seeing opportunities everywhere.  It's like notifying that the world is made out of code.  It's really great feeling.  So here's some ideas for a couple more steps forward for how Hugh bot can help you do repetitive things.
      How many times have you loaded up your company's website just to look up the address or number?  This one is hardly any effort at all.  You tell the robot to respond to a regular expression by calling a function, and inside that function, you just use message dot send.  And all that does is respond in the same chat room that the query was asked.
      And here's another one, we use this for support for some of our new customers.  So whenever a card is dropped into our list, we get a notification to our engineering room.  This one is a little bit more code to accomplish because the tremendously owe API is not particularly perfectly suited for this.  But it's a screen full of code.  It's not that bad; right?  And the principles here are the same.  You respond to a regular expression match command, do what you need to do, and send a reply to the chat room.  Now, I would love to walk you through all of these examples, but this is a 25-minute talk, so I'm going to skip the code from here out, also I know you hate looking at CoffeeScript.  So we're going to stop here.
      Here's an interesting one.  What if you've got a colleague that's always traveling to interesting places.  You can have Hugh bot hit up the four square API and see what kind of interesting place she's in.  Now, this is not creepy, by the way, because Elizabeth four square check-ins are public.  And B you okay ed this with her before you did it; right; right?  It's not creepy if she says it's okay.  You've got to ask permission.
      Another example if you're commonly sending or receiving images, have them drop a map image into the platform.  And we can kick off a test run from our chat room.  If you use A symptom EC2, you could spin up a new machine and add to a load balancer.  Maybe you're wondering where to go to lunch today, you could see who is talking about burgers nearby.  Hugh bot can notify your team when there's a responsiveness, and this could be an early warning signal that your site is going down.  And if that's your normal response time, I'm done.
      Hugh bot can do this directly by pinging your website, doing an HTTP call, or you can do ping DOM to do a more distributive test.  A lot of options here.  You can have it fetch some machine statistics from your operating cloud.  If you gather metrics using graphite or data dog, have Hugh bot put graphs in your chat room.  This one is amazingly powerful.  This one in particular changes the conversation from I kind of feel like we should do this thing.  To look at this graph.  There's a problem here.  Here's what we need to do.  Things become very clear very quickly whether everyone's looking at the same graph.
      You can give Hugh bot access to your company's Twitter account and now you don't have to worry who's got the password or whether that person is on vacation we still need to tweet; right?  There's no handoff here.  So now you're thinking, oh, this will never work at my company because they won't let me or we don't want just anyone writing tweets and those are valid conditioners.  But the great thing here is you're in wrong.  You're the one writing the code.  Or use a white list to who is writing tweets.  There's answers to all of these problems.
      So each one of these that I've gone through, and some that I haven't, it's an hour of work, half hour, hour of work, each one is a cultural stimulus.  Everyone is living in this chat room.  You're giving a tool to every single person in your team and everyone watches everyone else use them.  Each one of these is a cultural stimulus with a different response.  So the thing to know about automating something is that you're sending a signal by the very act of automating it.  For something that's a notification, something that's delivered to your chat room.  What you're really saying is I want to know about this fortunately all of the time.  For something that's an action, something that you asked the robot to do for you, you really want this thing to be easy to invoke.  And for both of those, you want it to be highly visible.  You always want everyone to see when this thing happens.  Whether you asked for it to happen or it's happening anyway.  It's kind of like putting something up on the main screen; right?  You're telling everyone, hey, look at this thing.  Or Hugh bot is telling everyone, hey, look at this thing.
      So everyone I've been scribing up until now is an umbrella term.  Chat opens, and there's a lot of positives to doing it this way.  And once you're doing this, your team is almost ready to being completely remote.  But even if that's not the direction you're going to go, there's still good stuff here.  For instance, this is amazing for on boarding a new engineer.  Think about it.  This is, like, everyone pairing with everyone else on ops on all of the time, and every single person in the chat room every time they do it, every time.  Including their first day.  That's really powerful.
      So all this is really good for those of us in this room.  We're mostly engineers and designers.  But what about the rest of the company?  What about the human resources and sales and support?  Can the rest of the company benefit from this too?  What you know?  Let's talk about companies.
      So just as every engineering team is different we're all unique and beautiful snowflakes, every company is different too.  But just like every engineering team does some of the same kinds of things, all companies do too.  Things like management, hiring, benefits.  And Hugh bottom has seen a lot of use with technical teams, engineering specifically.  But this other squishy human businessy stuff is new territory.  He's not really built for this squishy human stuff.  And, in fact, you can do worse than a bad job.  Remember this list of what automating an action says?  Turns out there's another one.
      Automating a thing is nonpersonal.  This is my favorite example.  When I get an HBD from a Facebook friend, I think all right.  Okay.  You cared enough to fill in the form when Facebook told you to fill it in.  Contrast this to getting an actual birthday card.  Someone went to the store.  They picked the card off the smell.  They spent real money to send it to you.  Plus they did all this two days in advance or even longer.  And maybe it's not what Facebook intended, but on anybody sends cards anymore, so that rarity makes it even more special pap.
      Humans value effort, care, and personalization.  And robots are just not good at these things.  So what kind of judo move could we pull here?  How do we automate a human and not kill the meaning of the gesture?  What's something we want to make easy but doesn't lose all of its meaning by the fact that it is easy?  What about the a high five?
      So what I'm about to describe is something when our founder told me about it, he proposed it, I thought he was a little crazy, but it turns out it's brilliant.  Let me show you how it works in practice, and let me tell you how its changed our's culture.
      So a little background first, Greg, function that.  I'll read this out loud to you so don't worry if you can't read it.  Greg is our chief mathematician.  And he wrote the statical model that's at the core of our project.  And for our sales team to do the job properly, they need the math.  And Greg have a as a great teacher, and Patrick is on our sales team and Patrick wanted to thank Greg for the math.  So he types high five, Greg another $75 for the session and response team.  And this is the result.  This is what happens.  There's a few interesting things.  Number one.  Hugh bot, Gort is the name of our bot, he pulls one of these out every time somebody high fives someone else.  He also mentions the highlighted yellow word is at channel, everyone who is in that channel will get a notification.  Their phone makes a noise, their computer makes a noise, and first down miss all of that, they'll get an e-mail telling them something happened.
      Number three is the last line on this screen saying a $75 gift card is on its way.  The company just bought an Amazon gift card and just sent it to Greg.
      Now, Patrick could have done this manually could have gone out and bought a gift card, expensed it, it would have taken him five, ten minutes.  This took him 10 seconds.
      And anyone in the company did can do this.  This is not just for tools or managers.  Any person can send any other person in our company a gift card for any reason whatsoever.
      Here's another one.  This is pretty typical of how engineering rewards each other.
      So the back story here.
      [Laughter]
      >> The back story here is that David had just come back from paternity leave after the birth of his first child, and he tried to tell a dad joke, and it fell completely flat.  It was not good.  But we wanted him to keep trying.  You can't shut somebody down after doing that.  It's the first time.  This one happened when our other founder discovered that the rewards were only recognizing integer numbers of dollars.  And I'm pretty sure it sent $3.14.  I never actually confirmed that.  So now you're probably wondering when we're going to go out of business from all of this.  But there are some basic limits in place things, like, how big of a reward can you give and how much money can you give out during the day.  But maybe surprisingly, we've never hit them.  We've never run into any of the walls at all.  But I've never had to explain what the numbers were.  On anybody hit them at all.
      And we hit a couple of tricks that would make Las Vegas proud I think.  Some random percentage of time one of two things will happen.  There's the daily double, which will double the gift card amount, and there's the boomerang, in addition to giving the gift car to the person you want to give it to, the giver will also get a $10 gift card.  And I don't know if you've heard of this famous experiment with the rad and the randomness, but this has compounded the use of these things.  They're very popular.  Now, these are two things that we just added in the last couple of weeks, so we don't know their long term effects, but they're pretty fun.  We've seen a lot of use of them.  So here's behind the scenes, I'm going to do a quick tour.  It's actually simpler than it seems.  We're running this through a service called tango card, which is a rest API for sending gift cards.
      And they have a lot of these we chose Amazon because we thought it was going to be the easiest to spend.  But there's a lot of options here.  They even have Best Buy gift cards if for some reason you want to give one of those.
      So we automated giving out gift cards.  And remember automating a thing has side effects.  And we've seen some cultural benefits of this.  I want to walk you through some of those here.  And the most obvious thing here is the money.  And you would think people would be really reluctant to spend real money, or they would go completely overboard because it's not their own money.  But we've actually seen really reasonable behavior.  We've never hit the limits put in place assist safety check.  These are the numbers that you let expect from pretty much any kind of peer rewards system that you want to pus in place, but they emerged organically, but you didn't have to impose limits.  This just happened.
      At a very short time, just a couple of days, people got a sense of what a normal sized gift was and how often they should be giving them out.  And also the tradition of the chat room of what you bought with the money.  This is a set of peelers that somebody got a little while ago.  And along with that, comes the tradition of giving out interesting amounts as high fives.
      So these things have been designed pretty carefully to be fun.  So people give them out all the time.  Weed our recognizing our coworkers for their achievements more often.  And any human resources pro will tell you that people respond to recognition to money a lot better.  And this is a lot better for management.  They don't have to decide who gets the rewards, the people who know best decides who gets the rewards.
      We've also noticed that on anybody is trying to abuse the system because we all want the right things.  As an engineer within I want to be seen as generous, so I will give out high fives whenever somebody does something cool.  And I want to do something that's noticeably nice for other people so that I can get some of that money.  So the incentives are in line perfectly.  Everybody wants the right things.  Everybody wants it to work.
      And there's also another benefit I've seen, sort of subtle, I don't know what name to give it.  The chats path is fairly obvious to engineering types; right?  You use software to automate software.  But this squishy HR stuff is it's new territory.  Building this thing had the effect of getting our engineers thinking about HR and feelings and stuff.  Letting them know that their skills aren't just for making product, they can also be used to make the company a better place to work.  Because that really should be everybody's job.  We should not depend on HR or management or the CEO to make sure that our workplace is a great place.
      Culture as you, and it's me, and it's how we work together.  So after this conference when you've slept off all the endorphins, and you go back to work on Monday.  Here's what I want you to do.  Go get some chat software, put a robot in it and start making your company a better place by writing code.
      And then tweet me and let me know how it turns out.  Thanks.
      [clapping]
      >> Awesome.  Thanks, Ben.
      >> Sure.
      >> Oh, man.  I don't have any -- I don't have as many questions as I do just, like, thinking about all the different bot stuff that I've done in my own Slacks and chats and stuff.  Have you ever used, like, writing a new function to onboard someone with regards to your code?  I found that it's a real kind of fun way to get someone building stuff.
      >> Sure.  Yeah.  Absolutely.  I mean whenever there's a new person on your team., it's always good to pull them in, I hate to use the word take them under your wing, but that's sort of the sense that's there and get down and get some work done.  That's why they joined the company in the first place is because they want to work with you.  It's like a breaking of bread.  Everyone wants to work together.
      >> Thanks so much.  Let's hear it for Ben.
      [clapping]
      >> So we're going to take a short break.  So get up, stretch your legs, be back here at 3:55, and we'll wrap up with our last talks of the day.  
