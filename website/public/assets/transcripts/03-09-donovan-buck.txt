      >> You really blew my head off there with the abbreviation.  You know, I'm a big accessibility champion, and I had no idea there were that many abbreviations for A11Y.
      >> Is this some sort of threat?
      >> You better watch out.  No, this close to Canada, you know, I figured bring horse.js back out.  It seems pretty convenient.
      >> It's close.
      >> Do you want to wear it?
      >> Yeah.  All right.
      >> It's got stuff in it.
      >> Potch is making my dreams come true right now.
      >> I'm not sure how this is going to do with the microphone.
      >> Because if any speaker is going to put a horse head on after their talk, it's Potch.
      >> We didn't plan this very well obviously.
      [clapping]
      >> Any questions?
      [Laughter]
      >> Nay.
      [Laughter]
      >> I have your glasses if you want them back.
      >> So if you're wondering why I'm wearing this, it's because you can see Canada from here.  The royal Canadian mounted police looks somewhat like this, but I think their outfits probably fit a lot better.
      I actually picked this costume for this talk -- while we're waiting, our next speaker, I guess I could start introducing him.  Donovan Buck is from Houston.  He wanted me to mention that NodeBot day is coming up in two weeks, it's an international event so there might be one in your area.  I think he mentioned there's one in Seattle.  Also that.  This should be pretty awesome.  I mean what server JavaScript day would be complete without robots?
      "These Bots are Made for Walkin'."
      By: Donovan Buck.
      >> You know, how close I live to Canada, I have a low number of Canadian puns.  They would come in handy right now while we're waiting for this setup.  It will be worth the wait for these boots walking.  Oh, wait I did it again bots.  
      Maybe if we get lucky it will burst into flames.  I might outpace the bear for the most exciting moments in Cascadia history.
      All right.  Are you all set?
      >> All set.
      >> Okay.  So Donovan Buck is here to talk to us about robots.
      >> Yes.  Sorry about the delay, everyone,.
      [clapping]
      >> So specifically my talk is about Johnny 5 and me of the ways that it has grown over the past couple years.  It's really opened up a lot of new possibilities in JavaScript.  We've moved way beyond a blinking LED.  The first time I saw Johnny 5 was in Portland, and I thought that was really cool and I would love to do something like that.  And so I went to NodeBots day in 2013, and I learned that it is pretty easy.  And it's very inviting, and it's a fun thing to do.  So I was hooked.  And I decided to build a robot.  But I don't do things easy.  I decided to do something kind of I am practical.  I wanted to be able to build a walking robot.  But I learned early on that walking is hard.  It's really, really hard.  It's very impressive that we all got in here today without falling down.
      There's a couple of challenges that have to be overcome.  First the robot has to maintain its balance.  And there's two type of gaits you can do this.  It's dynamic gaits and static gaits.  Most of these are dynamic.  Static is where the center of gravity is always in the polygon that are in touch of the feet that touch the ground.
      And I knew it was going to be hard to talk over this.
      [Laughter]
      If at any point the center of gravity, the robot walks or stopping during its walking gait, it will stay up right.  The center of gravity is safe.  It's still within that polygon.  With the dynamic gait, the opposite is true.  It would stop moving and fall over because it's depending on inertia or it gets another fector out there before it falls over and hits the ground.
      So static was easier, and I decided to -- that's my favorite one.  He just looks like I quit.
      So I decided to build a robot with a static gait, and I decided to go with six legs because I thought that would be easier, you've got all these things in contact with the ground.  It's less likely to fall over.  Yeah, we're done.  We've gone through the whole loop.  So if you want to see this again, find me later.
      So for the second challenge, we've got to talk a little bit about robot anatomy.  This is one of the legs on my robot here, it has a servo in this area, and it has a femur, which moves everything this way, and then the tibia, and then the node intercepter that comes in contact with the ground.
      And I thought that to make this robot walk all I was going to have to do was put the interfector in contact with the ground.  And I was wrong.  It gives you a drunk robot and it's very sloppy drunk.
      And you've got a couple of interfectors on the ground and they're working against each or.  Has got to give it's going to slip and slide all over the stable Table or whatever service it's walking in.  We want the incident fector to walk in a straight line.  And to do that, we've got to move all three joints in concert.  When we bring the tibia in, the interfector moves up and down.  So we've got to move the femur up and down.  It's a lot of things that need to happen simultaneously.
      This robot has six legs.  So that's 18 servos working together in concert constantly to make this robot move smoothly.  So I wasn't sure that that was even possible.  So all the work's being done on the computer, and it's sending commands over USB, and I figured, you know, this needs to work at about 30 frames per second so that it looks smooth.  That's 18 legs, that's 540 commands every second.  I didn't know if it was possibility.  Fortunately this guy, Rick is the inventor of Johnny 5.  Did a presentation called bits of NodeBots next.  And what he did here -- oh, good.  It's not playing online.  So what he has here is a quadripet that has three legs than mine, and it can move a servo to a certain number of degrees, you can pass a degree value and a number of milliseconds, and it won't take that long to move the servo.  And he's sending 1,200 commands per second over to the serial port, and it's handling fine.  You can see the sloppy robot stuff here, the feet sliding back and forth.  And that's understandable because he had to write all of this stuff by Mississippi limousines.  If you ever used his replacement for time-out.  I think it was invented just for this robot.  It was a lot of work to get the movement to happen here.  So when I set out to do it, I wanted to make it easier for everybody, and I wrote the animation class for Johnny 5.  It gives you some real world, it gives you a timeline, key points and key frames.  Tweening and easing functions.  Courtney's talks would be perfect here.  Because everything she talks about applies to a physical world as well.  We want to ease those movements of the joints so that it moo looks more natural and smooth.
      Now, I'm going to dive into some animation code real quick.  But not when the intent of teaching animation.  I just want to make a couple of points.  So this is animation and animation creation.  We're going to just require Johnny 5 and substantiate a new board and once we get the event we're going to create a couple of servos.  And Johnny 5 is awesome.  That's four lines of code, we've established communication with a microcontroller.  Set up PWM on two channels so we can control servos, and now we can send commands to those servos.  Four lines of code in JavaScript.  So very accessible.  Very easy to get up and running.
      So moving on.  We want to create a target.  A set of things we're going to animate.  In this case I made the two servos, and I'm passing an array, and that's my target.  And I'm going to create a new animation.  That gives us a timeline to work with.  And we've got a timeline to work with.  And now I can end cue an animation segment.  It's like a movie clip.  It's a short reusable piece of motion.  And we can just drop on.  That's got a lot of really helpful properties.  We can give it a duration.  This is 5,000 milliseconds.  So it's a five second animation.  We can give it a easing function.  I used component library.  We can give it cue points.  This is the point in time, so I've got 25 percent, 50 percent, where we're going to be putting key points, values.  And then I can give it a key frame array.  Now, this is a two-dimensional array, the first dimension goes to the elements, and the second for the cue points.  So that's pretty easy for doing a complex animation.  But you do have to build this array.  This key array can be frustrating.  And this is a array from a walk segment, and it goes on for another 2,000 pixels.  So that's only a crazy person would engage in something like that.  And it's also very prone to errors.  Here's an early test with my robot.  And that's what you get when you send infinity to your servos.  I got really lucky in that the servos weren't completely assembled so the servos had a full range of motion.  If I had done this later, that would have cost me hundreds of dollars because those servos would have stripped out so that was a really bad way to do things.  Fortunately this guy stepped up.  Ronald, he's -- does anyone know Ronald?  No.  If you ever meet him, give him a hug because what he did was awesome.  He created an application called go, Johnny, go, which gives us a Gooey inner phrase.  I'm going to switch over to go, Johnny go, and do a little demo really quick because I think it's pretty awesome.
      So here and we might want to put the camera on this.  So we can see better.  So go, Johnny go lets you create any number of projects.  And what you know?  I was wrong.  We'll do it in a second.  And it saves them to your working directory.  You can define targets, your servos, you can edit them, set all the parameters that should be passing in Johnny 5, you've got ace Iowa nice little form that you can create.  And I've got one here, Cascadia demo.  Let me see if I can make it fit.  It cannot.  So we'll have to scroll.  So we've got our cue points.  You can click and drag them around.  We've got our key frames and drag them up and down.  I don't know function the robot moving here.  But we can set it up.  So I can play this animation and see how it looks.  So that's pretty pedestrians.  I want to add some interest to that, so I'm going to go to this key point.  Move that up.  Move that out.  Rewind and play.
      So we've created a wave animation pretty quickly and easily, and we can click export, and it gives us that entire animation object that we can paste into our code and work with.  By the way, segments can be created did like, they don't have to be created in advance.  Change the gait of the robot, things like that.  So that's really cool.  Ronald deserves a big round of applause because he made it a lot easier to do stuff isn't Johnny 5 with animation.  So what kind of stuff can we create with that?  Let me switch over.
      So I'm using a leap motion controller here to control this robot.  And this is a very narrow table.  So that's a typical walk motion.  We're moving two legs at a time.  One leg gets up off the floor, and then it starts moving a second leg and we start moving a third leg, so we've always got two legs off the ground.  That helps.
      So we've always got two legs off the ground and moving forward.  That's where we're moving the legs in a straight line.  Now, turning has its own problems.  Each leg is describing its own circle.  And those circles have to be concentric around the center of rotation.  So it just makes a little bit more complicated to make a movement like that.  So that's pretty cool.  Get back to my presentation here.
      It let's us do some really complex things with Johnny 5 and animations.  But, you know, in a way, it's not very cool.  We're telling every limb what to do in advance without regard to the robot's environment.  We're explicitly setting the angle on each servo.  We want our robot to respond to environment like I said.  This is a fancy remote controlled toy now.  And that's not what we want.  We want robots that can be aware.  And there's a lot of things that have to happen to get us to that point.  We need to be able to map the environment that they're in more detail, and a much further range.  And first and more most we need to have to put them in a way that's not predetermined.  We need to be able to tell the robot, hey, go push that button.  So we're now dealing with points in 3D coordinate space.  We're going to be working three, X, Y, Z, cartons.  Animation handles that, we have the ability between 2D and 3D space, with all the functions and helpers.  That we have for one-dimensional values.
      But we still needed a way to position.  Fortunately Racquel works at NPM, she's a superhero.  Her superhero is math.  She demoed Manny in JSconf in 2013.  And it's algebra module that has solvers or helpers for solvers that's optimized for robots.  Most libraries are way more massive overkill.  This was perfect for doing robotics.  And what inverse schematics is, I'm going to talk about force in a second.  Here you can see Racquel pushing the slides and those maps for the degree of the servo values.  So what we're doing is looking at all the joints and the segments and finding those angles and lengths and we do the opposite.  We have a desired I understand fector position and you can see she's dragging the I understand fector here.  So we've got a way to solve inverse schematic formulas, but we still need a way to find schematic changes, and we've got a new module called Tharp, and it takes a position, and lengths, and it will spit out servo angles up for so it's incredible simple for what it does.  You just say I want to create a chain, it gives you a chain type that's predefined, and I rotation that is parallel to the Y-axis and coordinate space.  And we've got a femur and tibia that are both in the say so.  You give it an original relative to some focal point on the robot.  I just use the robot's center and bottom.  You tell it the segment lengths.  Whoops.  You give a start position for your I understand fectors where you want your feet to be when this robot turns on.  You use a constructor to use, in this case we're using Johnny 5 servos.  And you can be working with linear actuators or some other device that I haven't seen yet to manipulate your robot's limbs.  And this is just a standard Johnny 5 ops object.  So then you've got to create a robot.  This is even.  You tell it what kind of robot, it's a hexapod.  You tell it what chains you've created and you pass those in certain order, right one, right two, is on.  And then you've got everything you need for Johnny 5 to do the math to calculate the cartons for each of those servos and put that into where you want it to do to be.  So we're going to do one more demo.  One more awkward toggle in between screens.
      There we go.  Let me turn it back on.  So the first thing that's going to happen is very similar with what's going to happen with that last walk.  I'm going to open my hand, and goodnights stand up.  Instead of explicitly finding the angle of each servo, we've only found the position for the I understand fectors.  So let's get that working.
      And now what its doing, it's not moving at all.  Its being told to keep them in a certain position, but I want to respond from the input from the real world.  So in this case as I move my hand up and down, it's going to move up and down on that Y-axis, and also move it on the X-axis and the Z.  And also -- whoops.  Rotate around all those axis.
      And remember earlier I said I was going for 30 frames per second?  We've got this around 60 frames per second, that includes all the math, sending all the signals over to the robot.  So it's incredibly responsive, and it gives me a lot of hope for the incredible things we'll be able to accomplish in the future with Johnny 5.  So we can probably turn it off now.  Thank you.
      [clapping]
      Thanks so next step is for Tharp.  And we want to add more chain and robot types.  Robots are expensive, so that might take a while.  We can get a lot of people put in poll requests and buy their robots, and we'll help.  We also want to put a rapped variety of gait styles into Tharp, and we're going to do it for each robot type.  We want to have hexapods, bipads will be cool, spider bots, you name it.
      So Johnny 5 is pretty amazing.  It takes hard things and make them really easy.  And because it uses JavaScript, almost anyone can get it up and running with robots in an afternoon.
      And what's expected from us will change and unless you're going to be retiring soon, you'll have opportunities to build for other types of hardware and Internet connected devices if you haven't already.  And spending time with NodeBots is fun, yes.  But it can also pay off and get you prepared to work in that world.
      And last thing.  If you have ever thought about contributing to open source but didn't know if there's a project that needed you or intimidated, look at Johnny 5.  It's an amazing group, they're very knowledgeable.  Overwhelmingly positive and respectful to everyone who wants to get involved.  So I recommend you check that out.
      So that's it.  Thank you all very much.
      [clapping] 
      >> Thanks, Donovan.
      >> Thank you.
      >> So I have to ask you.  Do you welcome our robot overlords?
      >> So one thing I've learned is we have nothing to fear.  You all saw that video.  There's a long way to go before we can get out of their way and watch them fall down.
      >> Although I have to say you win the award for most terrifying robot I think.  Can it do any dance moves?
      >> It was totally twerking.
      >> I had to make it less scary by putting this range finder on it.
      >> It's all about the legs.  Very spider-like.
      >> Robots that don't look like robots would be more creepy than those.
      >> Like a moving roving tutu maybe.
      >> Thank you so much.  Great talk.
      >> Thanks.
      [clapping]
      >> So it's break time.  You're probably in need of coffee.  I'm slowly just withering away, so let's take a break, drink some coffee, and come back to the last set of talks.  
