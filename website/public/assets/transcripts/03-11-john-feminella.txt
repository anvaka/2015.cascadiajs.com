      >> That was radical.
      >> Thanks.
      >> How do we turn all of this into a time machine?
      >> You know, I think it relies on him.
      >> Relies on this guy?
      >> Yeah.  All right.  So let me know what I can do to help.  In theory.  Oh, hey, there it is a great job.
      >> Thank you.
      >> Do you have any connected devices in your house.
      >> I do not.  I try to keep them out of the house ever since that guy gave the talk on the printer catching on fire.
      >> Yeah.  Do you have -- that sounds to be honest a little pessimistic.  Do you see it getting better in the future?  Having trusted devices in your home?
      >> I think so.  Yeah, he had some cool stuff that he was working on that I think will help.  And like I said when I was leaving everything as an exercise to the reader.  I think eventually people will start realizing that securing these devices is important and not letting people hack the firmware.
      >> Hacking your toilet.
      >> Yes.  That would be bad; right?  And Japanese toilets, it could over heat the seat, be terrible.
      >> Wow.  Exercise for the reader.  Well, thanks so much.  That was a great talk.
      >> Yeah.
      >> So our next speaker, John Feminella, he works at pivotal, he's here to talk about time and how it can be implemented poorly in software.  It's a hard problem, so let's hear what John has to say.
      "A Matter of Time."
      By: John Feminella.
      >> So I'm John Feminella, and this is a matter of time.  You can read more about me on the in two places where I have a Internet places.  One is my blog and one is Twitter.  So this talk is fundamentally a talk about assumptions, and I would like to invite you during the course of the talk to think about what assumptions you may be making about time, specifically for this talk, but also more generally about software.  So every time you write a line of code, what assumptions are under pinning what you're writing.
      So we as humans operate in a world that is very confusing.  And if we didn't have assumptions to guide the basic ideas of how we would maneuver throughout the world, if we might run into problems.  So assumptions kind of ground us in what the deep valuates state for how we should behave is.  And that's often a very reasonable way to operate.
      The problem is that sometimes our assumptions can get us into trouble.  And I think this is particularly true with respect to software.  So here's two different samples of a piece of Python code.  On the left we might say that pick two numbers, or pick two variables and assign to them the same number in Python.  So here we'll pick two two two.  And then we ask if A is B, and it turns out that this is true.  But if we do the same for two two two two, we get another two to the end of it, we get a can totally different answer.  And in this case it happens to be because this particular implementation of Python, C Python, caches small integer values, so they're actually single.  And then is measuring object identity and not value identity.
      So the fact that A is B is only true for those cached integers and not for the larger ones.
      Or maybe this one -- hopefully none of you have written a method that look like this.  But let's say you want to divide a mechanism for determining if a particular year at a leap year or not, and give it some value that this will be an integer value, and we want to know -- we want this note it tell us true or false in response to a given year.  So pretty much everyone knows the first rule of it.  If you can divide the year by four and there's no remainder, then that's a leap year.  So, for example, 1996 is a leap year because 1996 divided into four is a even number.  And if the year ends in two 00s, if it's easily divisible by 100, it's not a leap year.  And you might also thank 2,000 by the same rule is not a leap year.  But there's another rule and 1900 is not a leap year but 2,000 is.  And that's a rule that has a lot of tricky logic associated with it.
      And sometimes the code around relevant aren't always things straight forward.  Here's some assumptions getting coded into software.  In 2003 the Massachusetts Supreme Court ruled in a case called Goodridge versus department of health that same-sex marriages were legal and that was great for the people of Massachusetts but not so great for the people who had to update the database systems associated with keeping track of certain schemes around marriage.  And this was -- this is an actual database scheme from an actual piece of software that I worked on that needed to be updated.  This has lots of problems with it.  For example, it's hard to tell when people get divorced and things like that.  But this is a socio-consumption and not a rule about when leap years occur, how often they happen and so on.  And this talk is a talk about people and assumptions we make and how assumptions can lead us astray.  And one of those areas is time.  And I think time is actually very difficult because we made it that way.  Time is not -- I don't think fundamentally difficult idea just measures the passage of events between each other.  But somehow we've managed to really screw it up.
      So first let's see if we can decompose -- make it less complex, untangle this spaghetti, let's lets get to the basics.  So if we think fundamentally what time is, it turns out philosophers have been thinking about this for quite a long time, upon intended, and there are two schools of thought.  The one is that time is basically something that exists whether humans exist or not.  So if there are no humans, no minds, time will still twist.  And the opposite of that is time is a mental construct the way that color is; right?  There's no reason to associate a particular wave length with color red or green or blue or whatever.  That's just a quality of humans have interpreted wave lights perform.
      So he thought that time was like that.
      For the purposes of this talk we're going to say time stops everything from happening all at once.  So space is what separates me from someone in the audience or me from the camera or me from the lights.  Time is what separates this moment and this slide from the next one.
      So now we come to a more guilt difficulty question.  Having decided what time is, how do we decide how to represent it and what are the ways we might care about representing time and what are the pitfalls and advantages in one representation over another.  So to do that, we're going to have to think about the way we represent time, and I want to invite you all to go hop in your mental time machine and imagine that you're a cache you're one of the first humans emerging from the muck and slime of history, and you gradually have some intelligence and you want to imagine the passing of seasons so you know when to plant your crops and how long it's been since you last ate.
      So to do that we're going to have to develop a way to track time.  And to do that, we're going to have to think of ways we can keep track of time.  On probably the most basic thing you would notice is that the fact the sunrises and sets in the same pattern each day.  And that particular -- well, that give that particular cycle a day and call that a cycle a day.  You might notice there's a second cycle that over the course of many days the sun doesn't go back to the same spot in the day a certain amount of time each day, but eventually it does, and we can call that a year and that's one revolution around the sun.  So after a year, the sun will be exactly the same point in the sky as it was a year ago.  And then there's also the moon which is a little bit longer than a day and shorter than a year.  And when we see a full lunation, that's the moon going around and that's once every 28 days.  And we call these cycles periods, and these periods form the basis of our calendar structure.  And one problem that we have right now, though, is that we can't measure anything more granular than a day.  So what if we want to measure a period inside of a day?  How do we do that?  Well, we can think of putting a point and saying that that's the point that we care about.  So, for example, here we're measuring about a quarter of the day through 182 on some arbitrary numerical system but notice where we -- how we represent that point is totally arbitrary.  So we choose as human beings living in the 20th century, we choose to represent that by dividing the day into 24 hours and saying that this represents 6:00 a.m.  But somebody in the ancient civilization might have said that that was the 59 night hour.  So there are many different ways of representing that point, but it's totally arbitrary how you do.  There's no reason why one is more correct than the other.
      So now we have this idea of time, which is picking a point.  Picking a representation of your period.
      So now we have the idea of an calendar, and we can map particular representations or points in that continuum to strings that we can use to communicate with each other and the most basic way of doing this is to map days that is, like, day 182 that we saw before to a date.  A string representation of the day.  So in the calendar, we number the days starting from a very specific date, January 1st, 4,713BC, and then we go up from there.  That's day zero and every consequent day is one more than the previous one.  So day 2,456,973 is November 10th of last year.  But, again, this is a totally arbitrary representation.  If we choose to use the game of thrones universe as the basis for our calendar, Web come up with a different representation that has maps and others to a numerical string of numbers and words.
      So now we have this idea of calendar.  We've got our time and our representation of time and the form of calendars.  But what time actually is it at any given moment?  How do we measure the passage of time?
      So I would like to everyone breach conference etiquette and look at your watch.
      So I heard most people say an hour and one and one person say business time and kudos to you, sir.  So most people said an hour and a minute, which is one way of representing the time.  We could add arbitrarily more units to that same representation.  The problem when we do that, what are we talking about when we say it's 6:30?  So when wee west it's 6:30 we're saying a particular moment in time, at some point that we think it's 6:30 at.  Except that's not true.  6:30 refers to a range of values not one particular spot.  So the points where it's true, it is 6:30 represent a range of values.  Everything from the moment it turns -- the instant it turns 6:30 to right before it starts at 6:31.  But if we be more specific, we don't escape this problem.  We're only talking about a narrower interval, a narrower range of values.  And moments are ambiguous, they don't identify a point, they identify a range of values.  So we're looking for some way that makes it unambiguous but being more specific doesn't help us.  So, for example, here in the course of one day, it's true for two different rages in the day that it's 6:30.  So it's not like being more specific gets us anywhere.  And those cycles repeat many more times.  So every day we had the same two cycles if we don't say a.m. or p.m., we still have the ambiguity.  And, again, if we get more specific by adding seconds or milliseconds, that doesn't solve the problem.
      And the reason n for me as a human being when you yelled out the hour and minute, I know what time you're talking about.  I know you're talking about today at CascadiaJS and the year 2015 at approximately 4:30 p.m.  Because there's only one interval that that's meaning to me to my.  I've taken all the context that I've had today and recognized the time you're talking about.  We need more than that.  We need specificity and being specific about what those intervals mean, not just getting the interval smaller.  So the way we can do that is to specify every single cycle, every single period that we had before in our representation of time.  And if we don't have anymore cycles if we've uniquely identified each point in the cycle, then we have a unique representation in time.  So instead of saying it's 4:00 or 4:30, we have to say it's 4:00 p.m. on this particular day on this date in a year in a calendar system.
      So it seems that gets us past the point where this is a solution?  Is that everything?
      Well, not really.  Because when you look at most software systems and you ask, for example, what today's date is or JavaScript and saying I'm going to give you a date and a time and you give me some result, I get something that's not part of the representation that I specified before.  None of those are part of the cycle, that GT minus 0400, that does appear anywhere in my input.  So where dialogues come from?  And more importantly can other things go there?  Because if they can, that means we need to specify something that we need specify.
      So there's clearly something missing from our domain model that's making it a little bit off.  And that's going to go in that last spot.  And that's going to give us the ability to get time uniquely.
      So we want times to correspond to a solar day when it's 9:00 a.m. for you no matter where you are in the world, the morning should more or less just be starting.  So we want our morning times to be light times when the day light is out.  And we want evening times to be out when the sun has gone down.  So we want those times to be the same for everyone no matter where they are in the world.  The problem is that our earth is round, and if we choose a universal time representation, at some points it will be dark for those people when it's 9:00 a.m., and it will be light for some people when it's 9:00 p.m.  So a very clever man named Charles solved this problem in the U.S.  He was a seminary teacher, and he was traveling on the railroads a lot, and he noticed it was really frustrating when he would step off the railway platform and travel 50 miles but the times at the different train stations would be totally different.  So he proposed the U.S. the idea of standard identifying on four different time zones, no.
      >> How wean wound up with four different time zones today.  That happened in 1880s.  And if we're just moving things according to that offset, we can solve a number of problems.  So I live in Virginia, which has an offset of UTC minors V, and friends in Australia that are in the offset UTC plus 11.  Now, we can communicate because we're using of the same calendar, but not serve using the same calendar with everybody else in the world.  So, for example, Beijing they're using a different calendar.  So okay if we agree to adopt the same calendar?  Does that resolve things?  Not quite because we're going to have to remember each time we switched alders.
      So, for example, in most of Europe they switched from the Julian counter in October 4, 1582 to October 15th.  Not all countries switched to the main time.  Many switched over the course of several years, and that means different provinces in those countries switched over years, so there was ambiguous what day it was, and you need to keep track of the days moving along.
      Another problem is that those offsets that we identified before, they also change over the course of the year.  Maybe you've heard of day light savings time.  So, for example, in Charlottesville, we're on UTC minus five during the winter and minus four in the winter.  And south whales was the same.  An hour ahead in the summer and.  In Charlottesville we change on the first Sunday in November and second Sunday in March.  But in Maryland Australia they change on the first Sunday on October and first Sunday in April.  And even worse we've also changed our mind about when we're going to change those offsets.  So we have those rules but not all the time and during different years we had different calendars.  And south whales is a totally different set of rules about when they changed and they changed their mind at a different time also.
      And another time that don't actually exist at all in a time zone.
      Seems like a more or less unremarkable time, but this actually occurs during a day light savings time position.  So if I say give me the U.S. time zone, convert that local time to a UTC time, it will turn out there's no UTC time that matches that time because when we go from 2:01 a.m. -- at 2:00 a.m. on that date we jump forward an hour to 3:00 a.m.  So there are no times between 2:00 a.m. and 3:00 a.m. that exist in local time.
      So there's no UTC time that maps to that time.  We have the opposite problem when you go back an hour in day light savings.  There the same moment occurs twice; right?  Because at 1:00 a.m. you experience all the times from 1:00 a.m. to 2:00.  And then when the clock tining to 2:00 a.m., you go back an hour.  So you experience all the times at 1:00 a.m. again.  So there's more than one times, so that's confusing.  And there's clearly something interesting in this relationship.  We need a way to map calendars and times together, and we need a few more ideas before we can make this work.  So first it's the idea of a reference time.  So this is the UTC we all agreed on.  We all have a central time at a we're coordinating on.  And then we have our local times and then some way of measuring the difference between them help you that's the time offset.  So my time in Virginia is UTC minus four right now, and you in Pacific time are UTC minus 7 and so on.  And the way we can represent time zones is by mapping every reference time, every point in that continuum to a offset, and that's basically what a time zone is.  It's a list of reference times and mapping them to offsets.  And you can look up what your offset is at any point in that continuum.  So that sounds really complicated, and we're going to need to make a database to solve this.  Unfortunately, someone else has done this for us.  Their job is to maintain a giant database of something called TC data, and they have one time zone for every list of historical offsets to remember.  Every time someone changes about when their times occur what the offset is and so on, that's a new time zone.  So Pacific time, for example, we have a bunch of rules and TC data that say when Pacific time changed its mind about what time zone -- or what offset it was going to be in and when daylight savings rule applied.  And you can see here in that very first row it says zone America Los Angeles.  We switched from LMT, that's local meantime, to 1883, November 18th, that's when Charles ruled went into effect, to local meantime to a minus 8 offset.
      The problem is that, again, a lot of different places have a lot of different ideas about what time zone should be.  So in Indiana there are at least 18 different time zones because different cities have adopted different rules about what day light savings means in the context of that city.  It's possible to draw a line through Indiana and cross through 11 different time zones.  Fortunately we don't have to do this ourselves.  There are lines to take care of this.  And in particular JavaScript has the moment JS library.  Java has node time and movie in Python.
      But that's the missing piece here.  We have this TC database that knows about the relationships between our calendars and our times.  So now that we have that, how do we actually work with times?  How do we use that representation to work with times in a software fashion?  The most important aspect to capture here is that intention matters.  These are all three different -- three very different ideas of what a time should be.  So if I say wake me up a at 6:00 a.m. do you think that number should change across time zones or you want that clock to wake me up no matter what time zone I am.  And if I say the call on the 29th every month, and does that mean the called call is canceled every February?  And if I want to go to the gym every technique in week, should then going equal time from another day.  10:00 in the afternoon one day and 4:00 in the morning another day when I divide the week into three equal did differences.
      And the simple math doesn't give us the answer.  And that's because there's two very important distinctions to make.  The first is duration.  Duration is a concrete number -- it's a concrete representation of time that doesn't depend what calendar you're using of.  Everyone knows how long 2,592,000 seconds is.  That's the length of one month.  We also have a representation that is based on a calendar and that's periods.  And we can have a number of different representations of the same thing that are all equivalent all that these are valid descriptions of one month.  I can say one month, 30 days, 28 days when I'm talking about February, I can see four weeks from counting weeks starting from Sunday, and five weeks of any length, I can say six weeks of weeks of any length that don't necessarily start on a Sunday.
      So some libraries handle for us.  Here's moment JS.  Let's say we want to talk about the date January 30th.  Okay.  Great.  Here we go.  Let's add -- let's say we want to go two months in the future from that date.  Let's say we add one month twice to that date.  We whined up with March 28th, which doesn't seem like it's two months after January 30th.  It seems like it's two months minus two days.  But if we add two monthlies directly instead of one month twice we get what seems to be the correct answer.  Well, what happened here?  What happened is those weren't associated, went into February and February only has 28 days.  So the closest valid day we could get is February 28th, and we added one more month and that's March 28th.  And those operations aren't associated.  So we need to match times to our intention.  We need to know whether we're talking about a duration, a period or something else.  Here's another example.
      Let's say I've got three dates, November 1st, 2nd, and 3rd, the reason 10 have is JavaScript months start from zero.  So 10 is the 11th month, it's not October, it's November.  So positive November 2nd, 2014 we have a DST transition.  If we look at the number of milliseconds between the second date and the third date, we see that it's 90 million milliseconds.  If we look at it from the second date to the first data, it's 86,400 milliseconds.  So on the one hand, it seems like one day should be 90,000 seconds.  But on the other hand it seems like one day should be 86,400 seconds.  If we use periods instead of durations, we'll get what seems to be the natural answer that these dates are separated by one day.
      But what if we switch to time?  What if we switch to a more specific representation of those times?  So here I've got November 1st at 1:00 a.m.  November 2nd just before 1:00 a.m.  And November 3rd just before 1:00 a.m.  If I ask for the difference between days between these two.  It's one day between November 3rd and November 2nd.  And it's also one day between November 3rd and November 1st.  That's not what we want.  We want something a little bit closer to that.  So our library is making an assumption that if we want -- for every -- unless we have a whole day, we're not going to get one more day.  So does is just one minute of being a whole day.
      So that's the missing piece that we didn't have.  The duration and the period plus the time zone database.  This gives us a complete representation of time.  This is everything we need to make time work in software.  And it's a matter of actually making that happen in our software representations.
      So in conclusion I want to leave you with thoughts.  Times are hard and we made it complicated by insisting on a lot of different rules.  Second our libraries can make assumptions that aren't necessarily the assumptions we want to make about how people use time and how we want to represent time.  And third is that the intention that we represent in software is the most important for things avoiding mistakes in how we use time in software.
      So I would like to thank the organizers, volunteers, and sponsors for making this a wonderful conference.  There's a -- there's a character in future all are presented by god who says if you do everything right, people won't be sure you've gone Don anything at all.  And I think that's especially true about running a conference.  So thanks very much, guys, I appreciate you showing up and staying for the very, very last talk of the day.  And I hope you had a wonderful time at CascadiaJS.
      [clapping]
      >> Great job.
      >> Thank you.
      >> Learned so much about time that I didn't already know.  I mean I knew there were some points there but wow.
      >> Right.
      >> And it's all our fault.
      >> That might be the best part of it talk.  Blaming everyone else for all the difficult.
      >> It's your fault.  You weren't born yet, but it's your fault.
      >> Yeah.  Exactly.
      >> Great.
      >> Thanks so much.  I appreciate it.
      >> Well, it's time for beer.  So if you don't mind -- yeah, I'll get off the stage.
      >> It's been a long day.
      [clapping]
      >> So our time has come to an end.  It's pretty sad.  Cascadia is so close in my heart.  Not because I can be has born in Oregon, and I live in Seattle.  But the people around this conference work so hard on it.  They are quiet for a couple months because they're so busy that I just -- I'm totally appreciative of all the hard work they've done.  So I want to give them a round of applause.
      [clapping]
      I also want to give a shout out to my friend, Lindsey Tucker.  She's the reason why I made nine costume changes.  She lives in Bellingham, she's an attendee here at the conference.  I know her from bike racing.  She's looking for a job if anyone is looking for an enthusiastic and hilarious Web developer.  Her Twitter account is LACO Lindsey.  Somebody suggested last night that you should do costume changes.  And I went yeah, yeah, yeah.  And I and went hung out with Lindsey, and she has a bear costume and a pirate and, like, three animal heads that I had to choose from, and it was pretty hilarious.  So that -- I thought was exhausting way to MC a conference for the first time.  So thanks to her.
      My only other announcement is about dinner and the party, which we are all in the way of.  So dinner is going to be at 6:00 p.m. out on the terrace and the closing carnival is sponsored by Twilio.  So let's give a round of applause for Twilio.
      [clapping]
      So with that, I think we're ready to hand it off to Ryan.
      >> All right.  Made it to the end.  Thank you so much to our speakers today.  I was just blown away by the talks as well as over the course of the conference.  I also want to give a special thanks to everyone out there who responded to the CFP.  Our CFP response for all of the different days that we had to put together was enormous, and there were so many good talks, even if some weren't picked.  We loved going through everything out there that is just such a great idea.  Whether it's on stage today or not.
      I would like to give a special shout out to our volunteers.  Marcy, Marcy's friend with the costumes, Tara, our speaker wranglers, mark, Joe, Marianne, and Victory I can't, as well as we had volunteers from the other days helping us out.  Our CFP committee who had the big slog of going through all of these talks forest, in the audience, and CJ and Bryce, who are not here today.
      Finally my last thanks is special thanks to Carter, who has now taken off, and Tracy for putting on the whole big thing and we'll hear from her in just a moment.  And lastly to you, the Cascadia family, for going through three days of awesomeness, and we've still got a little bit more continuing this through the night to continue and keep the awesomeness going.  So with that, I thank all of you, and I'll turn everything over to Tracy.  Thank you very much.
      [clapping]
      >> Forgot to get a speaker wrangler for me.  The irony that it will take just as long as to set up as it's going to be for the entire talk that I'm giving.
      All right.  Whoa.  Okay.  So, yeah, we're almost done.  It's been a long three days and an exciting three days.  But really I wanted to talk about what drives us to do things, like, run Cascadia from year to year.  So to be honest for me I am driven by avoiding negative experiences.  So I was excited by the opportunity a couple years back to help with Cascadia in any way possible.  Because I found it to be a safe space.  The Pacific Northwest in general when I lived in Seattle and Portland, it's always been very welcoming, and I find the tech community here to be kind and genuine and excited in doing really, really cool stuff.  So I was really stoked at the opportunity to be able to introduce my friends here and abroad to the awesome work that people in the Pacific Northwest were doing.  And also the cities were a bit smaller than by current dwelling of New York City.  But I had also lived there prior, and it was kind of awesome to see that we could help lift up an amazing community by putting on something like this.
      So I like to mention first that the reason we do things is that we do want to make the Pacific Northwest even more awesome.  Like, we love -- Carter and I both, Ryan, Carter, Alice, Katie, Dave endlessly updating the website.  We've got nothing but love for this place.  And the reason that all of us are here is because of the ask.  So it's amazing opportunities can happen when you just have the nerve to ask somebody if they'll help out.  I tried to manage the expectations of people that I asked to help so that they aren't bamboosed into doing a lot more than they thought.  Because it turns out that conferences are a lot of work.
      But also I've been blown away at every time I've asked somebody to help by how much more they end uptaking on.  It's always a risk because you never know -- you know, very few people, even your friends, you really don't know how they're going to perform and what ends up happening is they end up delighting you in what they're passionate about and how they can bring their own personality to what we're doing here.  So it's been beautiful to see how this year has come together with a new group of organizers.  And a lot of new attendees.  So that's been really wonderful.
      And so next I wanted to say thanks, and that's going to be a lot of thanks.  So who has been sitting over here in the dark running our AV for three days and staying very late to help us with, yeah, with Carter's fantastic singing last night at karaoke.  And then we've got step house, which really came through on helping us with our Wi-Fi set up, especially when we destroyed it with layer tennis.  And, you know, we've got Anthony from ACA video in back.  He's been with us for years as our videographer, and we couldn't ask for a better group of people helping out with that.  And also sorry for getting Matt who is in-house AV, and that's been a huge blessing.  White Coat Captioning, which has just been, you know, an opportunity that we didn't foresee and look forward to being able to offer in a much hardy way in the future.
          >> And then to seamy -- is David or Megan in here now?  I think -- it's not time.  I think we actually ran too early.  So we've had a killer staff at Semiahmoo resort.  They've gone above and beyond.  It's been -- I know we look really tired when we're running this thing.  But it's been above and beyond what happened last year and the year before because of the resort and the gorgeous offerings that they've given us.  So then we wouldn't be able to do any of this without our sponsors and workshops.
          So I'm going to go through that really quick.  So HBO, SauceLabs, Twilio, IBM Bluemix, GoDaddy, Travis foundation, &yet, Groupon, Porch, Formidable Labs, Hacks, Seattle dojo, Steamclock software, Filament, there's been -- Microsoft as well, Craigslist, we've had so many people contribute to this year and that's, again, it's a -- it's such an under staking, and it's a blessing to be able to offer that.  I also want to say thanks to our volunteers.  So if you helped out in any way, you contributed to reviewing the CFP, if you were here on site, if you wore one of these shirts, and you were helping us lift stuff, I want you to come on stage.  It's going to take a moment.  But if you're here, the people at the conference who have been enjoying it so much need to see your face.  And thank you.
          [clapping]
          I think it's just going to keep coming.  We've got so many people.  So all of these people and we probably are missing another dozen, including Carter put in way too many hours to put this thing together.  And not one of them, not a single person here makes a dime.  You know, you might get a meal or two, but that's to make sure you don't pass out after all the work that we've been put through.  So, again, I hear the clapping, and I totally agree that we should give another round of applause because we really can't thank all of these people enough.
          And lastly I want to say that my favorite part of Cascadia is that it is -- yeah, you're staying up here.  My favorite part about Cascadia is that you turn friends into alumni, you turn speakers into MCs and vice versa.  You turn friend into organizers and make new friends, and you couldn't ask for a better group of people, and it's really exciting to get to see that it just keeps growing and growing.  So, you know, we get to see last year's picture, which we're going to be replacing with the family photo that we'll take right after this.  It's just a nice reminder that eventually what we get to do is turn old and new alumni into family.  So every year gets to be a larger and larger family reunion, and I want to thank you for coming to Cascadia.
          >> And lastly on behalf of all of us, an enormous round of applause for Carter and Tracy.
          [clapping]
          >> So with that, we're going to turn the house lights up, and we're going to try to squash all of us toward the front of the room so we can get the family photo.
