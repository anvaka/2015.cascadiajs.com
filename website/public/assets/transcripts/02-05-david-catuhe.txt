      >> Other thing.  I have a few more T-shirts.  I have, like, six.  So we will do lost of the jungle, whoever comes first, can take them.  Sorry.
      >> Maybe we can put them on the back tables.  Would that be okay?
      >> Yeah.  Let's put them on the back tables.
      >> Sounds good.
      >> So you can find your free T-shirts there.  Thank you so much, Martin.  Let's give one more hand for Martin and JSON Web tokens.  Awesome.  All right.  We are just going to get a little set up and do some stuff.
      "3D everywhere with WebGL and Babylon.js."
      By: David Catuhe.
      >> I was going to attempt some French to introduce the next speaker, but I'm going to spare you all from my high school French pronunciations.
      Well, I would like to introduce to you David Catuhe.  All right.  David is a program manager for Microsoft Edge.  He's out of Seattle.  Let's give him a warm welcome.
      [clapping]
      >> So perhaps you didn't notice it.  I'm pretty sure you didn't.  I'm French.  Feel free to ask me if you didn't understand some of the stuff I said.
      So tweet me on Twitter.  And today I would like to talk something not related to Microsoft.  And but I will do some descriptive stuff.  I will use Windows 10, and I will use Edge.  So it's -- I'm pretty sure it's new for all of you, so that's a good way to discover this wonderful new browser, which is not IE.  And that's clearly easier for me now because for previous conference, hey, hello, everyone I'm forking IE, and then everyone will just not listen to me.
      So this time it's not IE.  So let's go back to our subject.  What's WebGL?  It's a JavaScript API that you can use on all new browser, you can see the new Edge icon, and you can see all different from IE icon.  Which is cool.  Back to WebGL.  So WebGL is based on open GL based .20, and it's based on the standardized, but by the Kronos group.
      So WebGL could be used directly, it's for your JavaScript code, but it's a really low, low develop API.  Meaning you're barrel on the, so you can discuss with the GPU, but you should know that the GPU is a really tough guy.
      So you have to deal with everything.  And most of the time when you deal with WebGL, it's, like, math, math, and a little bit of math.  And most of the time using WebGL when I see people using WebGL directly, they feel like this cat.  Like, no.  Never, ever I will use WebGL.
      So that's why I decided to write something for you guys.  I did that on my spare time.  But apparently it was successful, and we have now a lot of big project that use it.  UbiSoft in France is using it for assassins creed, we use it in Microsoft for some stuff.
      It's an open source project that you find on GitHub, so it's not the regular Microsoft that you may know, it's totally free.  You can contribute if you want.  You don't have to pay anything.  And I would like to show you today how to use WebGL if you want to use on the Web.  No plugin at all, and no headache as well.
      So you can go to get it and we have a CSN for the very latest version, which is 2.1, this is very fresh, we published it, like, three weeks ago, so I'm here to present you on some of the good news.  If you want to use it, it's just one single lighter weight.
      And if you want to use it, the main friend you will have will be the engine.  The engine is the guy that we talk with the tough guy.  The engine is the smart guy that your friend and this smart guy knows how to deal with GPU and all the weird stuff that happens between the CPU and the GPU.  And you as a user of the engine, have you just to ask, hey, please, draw me a 3D object there.  Thank you.  And it will translate that into a code thanks stinks.
      So from the point of view whichever you prefer, you have to deal with sin graph API, and inside this sin, you will just add object.  First of all, we camera, which is you.  Where are you inside this sin?  We have different kind of camera, I have to get back to that quickly.  We then add lights, and we then treat 3D objects.  Pretty simple.  We are out of the box basically objects, like, fear, box, et cetera, et cetera.
      And then because we are dealing with 3D, because -- we need to render as fast as possible, we have a render loop.  The render loop is a common concept when you deal with 3D.  You have to pump a lot of pictures every second to be sure that the user feel the smoothness and the ammunition.  To do that one line of code to call, like, engine dot run run dot loop and just call dot 1.  So let's go to some code.
      And I have here, I'm not choosing text.  I'm using code.  Boom.  Advertising.
      So how to do that.  It's pretty simple.  It's just a simple page where I'm just resampling the GS on a different server.  And I want to use this render canvas full screen.  And then get this render canvas here in my engine.  And here define I want and here.  I want to remove -- I want to have smooth pictures.  And then I have a function here where I create my sin as I mentioned before.  I'm creating a camera.  This one is a camera meaning that it's center on a object, and I can rotate around, like, a sphere.  And then I ask the camera to control all the input, the touch, input, keyboard, it will be interacted with your sin, and everything else is handled for you by the camera.  We have the light, the sphere, which is a box, wonderful demonstration, I just found it, so it's a box, not a sphere.  It's a box named sphere.  That's okay.
      We are in the Washington state.  Everything is permitted here.  So that's okay.  Formal box.  And then I create a material.  The material is a way to define how you render your object okay?  The object has no way to know the color of every pixels used by it.  So the material here, you say okay.  You will just have color, which is red, no blue -- no.  No green, blue, and red and blue -- I think it's proper.  I touch this material to the sphere, and that's it.  So it's in a declarative way of using it I want something.  And then you create the sin and you just render loop.  The result.  Boom.  It's not Chrome.  It's Edge.
      So you have a box here.  You can rotate around because we're supporting touch as well.  I can zoom if I want.  Pretty simple.  And going back to shutters, we can also define more interesting stuff, like, same story I have a render canvas here.  I create my sin the same way, but this time a create a box, which is a box.  And also a real sphere, which is a sphere, a plane, a cylinder, this is really cool.  I don't know if you know what it is, I will show you.  Some lines, and then I can play with position.  We are dealing with free space, so we have X, Y, Z position, so I can move them all around.  And then my thing is ready to go.
      So the result is by not just creating a box, but also a lot of other stuff.  Now I have as you can see here, my plane, my box, my cylinder, and the knot.  It's like a soft edge which has some issues.
      And interestingly now I just and okay.  Sin.  Please render of a default, just change the rotation of my sausage here, and you can see that -- yeah, it's rotating.  Woe.  It's smooth and beautiful.  We can spend hours just watching this demo I'm pretty sure.
      And then next one going further -- same story.  I have my sin, Miss I camera, and now I create six sphere, and I will move this sphere on a single line here.  So from the left to the right.  The plane and now I will give them different materials okay?
      So, for instance, here the first material will say okay.  Just render as a wire frame okay?  Don't feel it, just render the lines.  The second one we say okay.  Here is your color.  It will be red, but you will be also almost transparent okay?  The third one say okay.  Just don't use a plane color, please use a architecture, which is this one.
      And then you can also say you can mix stuff.  You can say okay.  I have a architecture, but I will like to move the architecture on the object.  And then I can have a architecture or I can have a architecture which is transparent and I don't want to move the back face, and I will show you what is that.  And then the back architecture I play with the scale to multiple the architecture on top of the object.  And let's see the result.  It will be easier for you guys to understand.
      And now we have -- yes, we have six sphere.  The very first one here is just wire here, the second is red, the third is texture, the fourth is the texture with a different position on the object.  The fifth one is interesting, it's an object, and we're writing black, instead of writing black, we're using the pixels, so it looks like we can see through it.  But there is back face coloring.  You've been the face, which is back wall from you.  So, for instance, for these two, we don't need to render the face in sight of the object.  And that's why for the last one we ask please don't remove the back face.  That's not easy to see here.  We can see inside of the object.  Okay?  And it's just, like, every time a few lines of code to do that.
      Finally we can also say I have my canvas, blah, blah, blah, and this time I'm going to play with something totally different.  And creating a 3D sphere is not just about creating objects, it's about creating animations and in this case particles.  You can create -- it's out of the box particle system.  It's based on small dots, and you can control.  So, for instance, my particle will use this specific texture.  They will be omitted and then we have the color between color one and color two and we have this color one day we die.  And then we have the size between that and that, different lifetime.  So you can find a lot of stuff, gravity interaction.  Ask the result is that you can play with particles, dynamically inside your browser.  Particles are really interesting, for instance, explosions, fire, smoke, et cetera.  So here I'm just rotating here, and you can see that the engine will just generate for you particles.  We've cut off between first and second and blah, blah, blah.  All right?
      So going back to my slides.  Now you're convinced.  You want to leave with Web GS.  You want to experiment it.  And forking Microsoft, you still have to do that a lot of times.
      The very first one is the playground.  The playground is a place where you can live code and see the result.  For instance, here I have this sin, which is just defined here.  Let's say the intensity of my light is not what I want, I want one instead of .7, or you don't want a sphere here, you want to move your sphere, we edit for you in the sense, so inside the browser you can have all the help.  I think as a developer, it's easier for me to.
      >> Then than we -- by practicing and experimenting than reading the documentation.  Meaning going to the website and closing the browser.  Most of the time.  Here if you want to play with it because there's this help, you can learn, for instance, that position here is an object you can move it four to the right.  Boom.  Wow.
      Yeah.  I know.
      [clapping]
      >> So we created for you guys a lot of -- let me increase the for not a little bit.  Yeah, we created for you guys a lot of different let's say tutorials where you can learn, blah, blah, blah, shadows, for instance, and live and realtime shadows where we have these two lights here that generate wonderful live shadow.  To do that.  The code is just here.  And what you're doing just click on GIT zip, it will generate a page, and put some architecture so you can just copy paste that on your website.  And if you want to share, that's the main goal, if you want to share what you're doing, I will do something so fancy, for instance, changing the intensity to one, boom, and then I can run that be I'm so proud of that, I can click on save, and it will generate for you like in unique URL, and you can share that with your fan and say, look, I'm so wonderful.  I created 3D stuff.  And this one is a little bit more complicated.  If you want to go further and just using this standard, you can.  You can with the GPU.  I warn you it's a tough guy.  But if you talk the right way with him, he could be interesting.
      So here you learn how to create shaders.  So we have here same story actually.  It's a space where you define both.  I don't want to go deep noosed this specific stuff if you're interested in shadows just being me.  It's a way for you to understand all shadows are walking.  This will be compiled to a assembly code that will directly be generated on the GPU, so I can control every pixel on the screen is generated.  And you can, for instance, look, it will be magic.  I want to be -- to do something, like, dot RRR, meaning give me some black and white.  No.  You fixed is by yourself.  Yes.  And now it's black and white.  Wow.  That's a poor.
      You have a different kind of shade here, for instance, the environment -- yeah, this one.  Where you can see reflection.  That's cool.  You can just read the shadows and understand how shadows can work.
      All right.  But now just about sausage and box and dealing with sausage, but most of the time you need to go further if you want to create the 3D application.  So that's why we also shipped tools for you to create content.  It won't be for you most of the time.  It will be for 3D designers that can help you.  So you can just create your sin and generate a dot on file.  You can also work with 3D is Max, and this is a new step that we did for the latest version.  You can even deal with -- let's go -- unity 5.  This is unity 5, I just bought this wonderful spaceship on the unity store.  That's interesting if you're a developer and you don't have 3D designer with you, you can very content onto the store, there are a lot of them.  This one is free, so for free is interesting.  And you can just use the W dot GS extorter to just generate for you like it will generate for you.  And with all the assets required, and I have to wait a little bit.  Yes.  I'm pretty sure it's working.
      It's just, like, you know, waiting blah.  Oh, boom.  I love this kind -- this is how we work.  It's like zero to 100.  No need for the better whatever.
      So if you're going to -- and, look, it's not Edge because I'm using Chrome if I want.  That's -- I'm doing what I want.  If you go to control -- no.  You will see this sandbox, it's a tool for you to directly test your sets without having to create a page with all the stuff.  Even if it's not complicated most of the time we are developer.  We don't want to write a lot of code.
      So this is the stuff exported, and I just have to open them inside the sandbox.  Wait, like, not too long.  And boom we are inside my browser the spaceship that I can use now to create the next wonderful game that you want to create.  It's just directly.
      So you don't have to deal with box, everything here will be done for you from unity 5.
      [clapping] 
      >> But if anything it's free and work with the PC and Mac, yeah.  You know.  It was not enough.  We met with a developer who said, no, I'm running Linux.  So let's introduce a new feature that we also shipped, which is the supporter.
      If you don't know it, please let me introduce you cloud RU.  It's a tool that you can find online.  There are a bunch of guys from Canada, so not far from here, they created this incredible 3D editor purely on the Web.  These guys are just mad.  Everything is supported, like, you can create this fighter in a couple of minutes if you're good.  And the interesting thing here is that you can click on file, and you can click on file again if you want.  You can do that twice, that's interesting, and you can click here, and you will have support for W JS, and if you're not running Linux, that's not a problem.  You can ask your designer to create really cool sets like this one.  I'm just waiting for the stuff to be prepared.
      Going to the sandbox this time using Edge, so it's already open.  It works on at least two browsers, and once its done.  So I can download it.  Boom.  I want -- I already did it, unless the Wi-Fi is really fast, it was.  Thank you.
      Let me put that on the desktop.  And just opening the sandbox.  And I want to use the fighter.  And this time boom.  So there is a sphere.  Yeah, I put a sphere because I thought that the -- it was too beautiful so I decided to the other sphere.  And you can still use that if you want.  You may need to ask Disney if they allow you to do that, but you can.
      So go back to my slides.  All these tools will generate for you dot W files.  We now have three different from the very first one in JSON format.  You can read it.  And I will show you a sin, which is a virtual museum.  The virtual museum is 22 megabytes.  When you when did you use it on file, it's a little bit too much.  And with the Internet we have today, you can then move to something called an incremental WMJS.  It's not just one single file, but with all objects in your sin, inside separate files.  So it's up to you to download the sin while moving.  Let's say you want to, for instance, generate New York.  You want download New York in just one call.  You will just generate the place where you are and while moving, while walking, you will load different object, different part of your scene.  This can be done with the incrementally slides, and we are support binary, meaning that the main file will still remain in JSON, but all 3D assets are the geometry will be back in the final format, so depending on what you want to do from 22 megabytes to 9 megabytes.  And it's just three Meg fights relevant bites.
      And then we are so different cameras, which is interesting.  So so far I show you the camera, we have touch support, we have virtual realistic swarm, and VR, so working in -- that's a same but only on Chrome and Firefox you will have Web VR.  So it's a way for you to support whatever.  And if you want to use game pad, instead of using aqua camera, you will create new game pad camera.  That's it.  You don't have to do anything else.
      So I just saw the talk from Dave before, and it was about WebGL, so I decided to tweak my slide a little bit, because we also came for WebGL.
      So let me move to -- I will be totally honest with you.  We have a bug on Edge.  So I have to use Chrome.  But it will be fixed by end of this month.
      So this scene was made to really phase the support on the 3D environment because the sound is really important when you want to deal with 3D.  Because to create a good -- experience.
      The sound here.  Two, one.  One.  It's, like, .05 actually.  But so this scene was done for me by a designer, as you can see we can wonder around, we have some stuff really cool like this phrase that you can see the moon.  And while moving, you can see that the 3D sound.  I'm not sure it's really of use in the room.  But we have 3D sound positioning.  And I have something for you guys.  With this -- we decided to kill people at Microsoft.  The first we killed was him.  And you ask for it.  You pray for it.  You cried for it.  We also killed I6.
      [clapping]
      And now we are calling Edge.
      And with the demo I would like to do because the talk from Dave was so cool.  Let me go back to the so we ask for a lot of stuff from WebGL, and we have this cool demonstration, interesting, there was a link here.  So it's exactly what you mentioned before, Dave.  It's an analyzer, but this analyzer now it's linked to a 3D object.  And it's a analyzer.  So exactly the same stuff.  You can try that in GLS if you want.
      And then because I'm running late, I just want to skip a lot of stuff here.  We have tons of features for you guys.  The best way to discover it is tweeting me or just try it.  It's free.  We are looking for contributors, we are looking have a bunch of them.  But if you are dealing with 3D, please come.  Use the link and that's it.  Thank you very much.
      [clapping] 
