      Now playing:  "Sweet Home Alabama."
      ¶¶¶
      If you have your laptops out and observe the no laptops out rule, I would appreciate you.  Sweet.  Cool.  Now that we've got that settled, three more talks to go, I believe, so we're almost there.  Our next speaker is Clarissa, she's an author of learning responsive Web design, and she's here to give us take a talk about responsive color, on the Web I presume.  Join me in welcoming Clarissa.
      "Responsive Color."
      By: Clarissa Peterson.
      So if you ever watch old cartoons on TV, you relevant Bugs Bunny, you might have seen tech color on the screen, and you might wonder what that was, it was a process to adding color to motion pictures, when they first had movies, they were in black in white, and it took them a while to figure out how to put color on the film.  And they figured out some process, and tech color was the first process.  And Wizard of Oz was the first movie that used it.  And this was the first time they could take advantage of color, and they used it a lot in this movie, like, you can tell the green of the witch's face.  Or the ruby red of Dorothy's slippers.
      And color has the ability to transform the experience.  The shoes were silver in the book, but when they made the movie, they decided to make them ruby red to transform the experience into something even better just because they could because they had this awesome for adding process to movies.  TV too started out in black and white of course.  And although color transmission became popular in the 1960s and '70s, it was quite a while until everybody has TVs at home, that's why you see them on hotels because you would go on vacations if you had a black-and-white TV at home, it was really exciting to go stay in a hotel and be able to have a colored TV and see this awesome color on the screen.
      In my house we didn't have color on the TV until I was ten years old.  So big bird was gray, the smurfs were gray, everything was gray, which was fine because you still got the story.  It didn't matter.  The message and story was there no matter you saw the colors or not.  But once you did have color on the TV, it was pretty cool.  And TV now of course it's just millions of colors and beautiful and high resolution, and it looks like you're looking at the real thing when you look at the screen.
      Computers started out not in black and white, but monocolor, green text.  When we first had the Web, monitors couldn't display the colors we have now, a lot of them could only display 256 colors, and what we did back then was we had a chart like this, there's only 256 colors you could use in CSS and be sure that that color would be displayed correctly on the monitor.  So you had to pick one of these 256 Web-safe colors in order to get that assurance.  Because if you picked any other color in CSS, a different color number, it could really turn out to be anything, depending on what the monitor decided to make it into.
      You had to use one of these safe colors to make sure that your design looked the way you wanted to.  Now, again, of course on computers we have millions of colors.  But websites are different than movie and TV.  With movie and TV we know the story is the most important thing; right?  It doesn't really matter function the color that much because you're there for the story.  But websites, websites are usually static, and we think of them more like a printed photo because, you know, photos you print them out, you have control over the paper and the corals and the ink and everything.  And you just make them look like the same every time.  And we think we can do that with websites because that's how we associate them.  But the truth is we can't because there's a screen in between.  We don't have control over the whole process like we do with printing.
      And I'm going to talk more about that in a minute, but first I'm going to go into a little bit about how color works in CSS.  How the color gets on the screen.
      There's three colors that make -- three qualities that make color what it is.  Hugh, value, and saturation.  The first of these is Hugh, and this is what we think of when we think of color.  Red or green or purple.  You know, but that's only part of the color.  And the second part is value, which is the lightness or darkness of the hue.  How much white or black is added.  Here in the middle we have a pure purple and the darker values on it on the either side.  Value is the most important part of color because it determines how we recognize things that we see.
      So if we take a picture like this, and we remove the hue and just leave the value, of course we get a black-and-white picture, but we can still recognize people.  The people look like people and the trees look like trees, but you can't do it the other way around.  You can't have the hue or the color, the red, green, and blue, and have everything the exact same value because your eyes would not be able to recognize anything.  It would just be a jumble of color.
      Saturation is the third color, and this is the intensity of the hue.  So here at the top we have a fully saturated red and we're adding black and gray to add a more muted color.
      So this is what it looks like full color and then if we desaturate it, it's going to look more gray like this.  And if we make it darker, we're adding more black on it or white to it to have a different value this way.
      Color notation in CSS, this is the first thing that we learn in CSS.  How to write out the colors.  But it's important to know where these colors come from.  The colors on the screen are dependent on the light that is received by your eye.  And your combination gives you a combination of red, green, and blue, to mix the colors that make up the colors you can see.  So the pixel is the smallest color you can see.  But a pixel is made up of three different subpixels, which is red, green, and blue.  And each of the subpixels are lit to different intensity to determine what the color of that pixel is.  So there's 256 values for each of the possible -- for each of the three subpixels, and multiplying that out, you get more than 16 million possible colors that you can put in any individual pixel, and this is far more colors than the eye can differentiate between.
      So there's two main ways to write color notation in CSS.  RGB and HSL.  And RGB is older and more common, and it's an example of RGB, and that's normally what we learn first.  In RGB you're it going to say what the all of each subpixel.  There's 256 values for each one.  So you might use an integer, so you're going to have an integer for zero to each of the numbers.  So to on it top line we have RGB and then the three numbers in the parentheses.  It's pretty straight forward.  The second line is the same thing except we're using persist instead of integers, so we're going from zero percent to 100 percent.  And you can't mix integers in the same.
      And hex works the same way.  So instead of ten possible digits, you have 1 of possible digits with the last six being the letters A through F.  So for each of the three colors, red, green, blue, we have a two digit number in hex from 00 to FF, which, again, this is 256 possible numbers for the red, Green, and blue, and it's a pound sign with a six digits after it or shortened to three.  The problem is it's not easy to look at a number and know what color it turns into.  For example, let's say I wanted to have yellow.  How much red, green, and blue do I need to mix to make yellow?  Some people probably know the answer to that, I'm sure most of you don't, and I have to look it up.  And then comes HSL notation, which makes this a lot easier.  HSL is newer to CSS.  It stands for hue, saturation, and lightness.  Remember we were just talking about these qualities.  Unfortunately, HSL is not available in IE8 or older, so we have to use a fall back color.  You can use Sass to automatically make your fallout color.  So that's okay.  And the three numbers mean something different.  The first is hue, here we have 120, which is green, and hue remembers our actual color, light green or blue or red, and to get the number have toker, all the colors are in a circle with 360 degrees going all the way around with red being zero, green is 120, blue is 240, et cetera.  So you have to be familiar with this color wheel to pick the number you want with the starting hue to get the color you want on the screen.
      The second number of HSL is the S, which stands for saturation, so you're going to say how much gray you want and the third number, L is lightness.  50 percent is normal.  If you're going to have a higher number, you're going to have more lightness, or 100 percent would be if you will light or zero percent would be black.  So you can have any percent for the last number.  And the first number is the integer and the other two are persist, so it's important to do those the right way.
      So the numbers we have right here give us a plane, bright green that's fully saturated and at normal lightness.  If I change it from 100 percent to 50 percent, it's less saturated, changing the saturation.  If I change the third number to 20 percent, it's a darker color.  If I clang the third number to 80 percent it's a lighter color.  So it's a lot more intuitive to RGB.  So if you're designing in the browser and you just want to pick colors on your ahead and make them numbers, HSL is really the way to go.  Because as long as you know what color is starting with on the color wheel, you can just adjust the other numbers to get to the actual color you want.
      Unfortunately, it's hard to go from an application like Photoshop to get HSL numbers.  So usually if you're starting with a design in Photoshop, it is easier to use some version of RGB.
      Opacity is a interesting part that's newer to CSS also, and opacity is how transport something is.  RGBA notation, it works the same as RGB except you're adding a fourth channel at the end, A, which stands for alpha, a measure of opacity.  So this is what your notation would look like.  You have the fourth number there, which is going to be an integer ranging from zero to one, a decimal ranging from zero to one, with zero be transparent and one being opaque.  And you can only do this are BGs or integers.
      So this is what opacity would look like.  These are five boxes, the first has an opacity behind it, and the bottom has an opacity of zero and it's fully visible.
      How CSS determines what those looks like when the blue box and the red text overlap for each fix he will, it figures outs the value of the blue or the value of the background and the background the backward of the for ground and combines them to make a color.  So what you see is a purple-ish color where the blue and red overlap.  HSL works the same way just like the HSL with the three numbers and then you add the fourth number for the opacity.
      There's also an opacity number in CSS.  And it works differently and applies to the whole element.  So here when I have a DIV, that mix everything in the DIV opaque.  Everything is transparent, the text is going to be transparent, and the border is going to be transparent.  So if you want to make just part of something transparent, you can use the color notation.  Let's say I just wanted to have the background transparent, I don't want to use the opacity property.  I want to use RGBA or HSLA so I can just apply that to the background and make only that transparent.
      So that's how color notation works in CSS.  But now we're going to get to the part that's important to users, which is how the color looks to the screen.  So when we pick out colors that we want to have on our website, not everybody sees the same color.  And that's something really important to think about.  Most obviously thing is colorblindness.  One and 20 people are colorblind, it's more common in men.  Colorblindness, it's more accurately called a color deficiency because it's not that people can't see color at all, it's they don't see color the same way as everybody else sees colors.
      There are different types of severity levels.  Here's an example of three different types.  The top left there the rainbow is with a normal person color vision would see, and the other three are people with colorblindness.  So you can see the colors are very different.  The most common is green and red, which makes reds look like greens.  So this is what somebody with normal color vision would see if they went to a fruit market.  A lot of different colors here.  If you had red, green colorblindness.  You would see this.  And I look at this and how do you pick out fruit because it's all the same color.  And it's crazy.  And when I saw this, I was, like, oh, wow that's amazing because we think of colorblindness in our heads, and we know that's a thing.  But we don't understand how to changes what people see.  And it's not that they don't see colors, it's that they look at things and can't tell things apart as well because they're different colors instead of the same colors.  And obviously people adjust to that.  And when they're looking at a website People's No. they may not be able to look at a website to tell apart colors that we can tell apart.  And there's some browsers, Kindle, some game consuls.  And not relying on color to relay meaning to people because they might not all see the color.  A stop sign is a good example of this.  Stop signs are always red, it makes it really clear, you're driving down the street, you see red, it's a stop sign.  And it also has eight sizes, so it's recognizable to people who can't see red.  And there's also a back up for other people that can't see the red.  You also want to think about where your color is your content on a website.  For example, this is a site where they sell shirts.  And you can get the isn't it true many different colors.  If you hover over one of the color boxes on the bottom, it shows you the shirt in that color and tells you what color it is.  So let's say I'm a colorblind person coming to this site.  I know I want to buy a light blue shirt because people have told me that I look good in light blue, even though I can't tell the difference.
      And I look at this and it tells me this color is permission jewel.  So how does that help me if I want to buy a light blue shirt?  It's actually pretty horrible.  You know, and this is something really super basic.  I mean there's obviously clothing designers out here that are, like, wow permission jewel, this will make our shirt sound really exciting.  You know, but in reality, this makes it harder for people to buy their product and they're going to go away and go to another store.  So it's just something to think about.
      So I notice you don't have colorblindness, you need to make sure that your website is still accessible to people who cares the colors.  And one thing you can do that's easy, if you have a Mac, if you can to accessibility settings, there's a box that you can check gray scale, check everything, see how it works.  There's websites and tools where you can take your website and see how it works with various colorblind options, but really the gray scale thing ends up being easier and faster to give it a quick check.
      So besides colorblindness, do we all see the same thing?  No, actually not.  There's perception of color.  We've all tardy harder this that men can see 20 different colors of beige and men can only see one.  And that's sexist and we've all heard that.  But it's a fact, and there's scientific studies that men's are less likely to differentiate shades.  So if there's shades really close together, a woman might be able to tell them apart and a man can't just because their eyes develop differently because this was interesting to me, you know, something I never thought of.  And men actually see some colors differently, like, yellows look more green and rids look more orange to them.  So if you're sitting next to someone and you're a woman sitting next to a man, what you see on the screen here light mite look slightly different to both of you.  Just something to I think about.
      Our language also affects our color.  So if we grew up in a culture like most of us did where we have a box of 64 colors of cranes, we're used to applying different names to colors.  Like red can be rust or brick, for example, a study red and orange use the same word.  They're not separate colors.  There's just one color that covers both red and orange.  But in the same language there's several different words for shades of green.  And it's just because the way that they interact.
          THE WITNESS:  Environment.  For example, they might need to tell apart many different plants that are different shades of green, but there's not a lot of red or orange things around them, so different words never evolved to fit those things.
          And then there's what you think you see.  We've all seen this; right?  The dress.  And the dress is blue and black.  But the photo it's over exposed and poor light balance, so it looks like it's white and gold.  So we can go in here and look at each individual pixel ands what color it is.  But the fact is it doesn't matter because we look at it and we think we're seeing something different, so that's really something important to take into consideration on your website.  That people might not see what you think you want them to see.
          And then there's screens, which is another problem.  Do colors look the same on every screen?  And the answer is no.  And you can see this if you ever go to a store that sells TVs.  You'll see a whole line of TVs from different manufacturers playing the same show except what you see on the screen will look slightly different.  The difference betweens models and manufacturers can be slightly different.  An individual device can change color over the years as it gets older.  The problem is RGB, that we talked about, isn't actually color.  It's just more like a recipe that each device can interpret any way it wants.  And of course they all show something similar, but this device and this device night might not interpreting that RGB recipe exactly the same.
          Here I have a photo from my MacBook and my iPhone sitting next to each other, they're both at full brightness, but they display something different.  The blue is darker on the left, and I was surprised at how different they were.  So if you're sitting in front of a computer and picking out your colors very carefully with you might not realize have made going to look different on every device.
          Light also matters, the brightness of the screen, this all affects how the colors look.  If you're sitting in a office with fluorescent light, that's different than sitting outside in natural light.  If you're in a darkroom, the screen on your phone might change brightness to adapt to the light level of the room, and that will change the colors.
          If you're outside in the bright sunlight, everything on the screen will look washed out and there's not enough on the screen to see contrast.
          So we can do something about this -- well, we can't, but in the future we're going to be able to do something about this.  In CSS 4, there's going to be light level media queries, which work with the ambient sensors and then you can change your CSS accordingly.  So for somebody out in bright light, you might want add more contrast for them to see your screen.
          So then what do you do now?  It doesn't seem like there's a lot you can do without this media query that's going to be really awesome when it's available.  But you need to remember your job isn't to make the colors look the same on every device.  It's to make the site look good and to use good usability.  The place to start is with testing.  And of course we already to know test on a lot of different devices.  But we also need to go out and test in different light conditions.  And almost on anybody does this.
          But we need to, you know, we need to take our devices and still see if everything looks okay because you're going to find a lot of times if there's not enough contrast on the site, it's not going to work well in bright sunlight.  And you can't query light Ryan, but you can query screen sizes, you can change the color lightly on a smaller screen to add more contrast to make it look a little bit better.
          What you really want to think about is in bright light you want to have dark text and light background because you want to increase the brightness on the screen to make it stand out in the bright sunlight.  And these are just a couple of examples of sites that changed what their navigation looks like a little bit for smaller screens.  On the large screen they have light text against a colored background, which would be really hard to see against sunlight, so they have the contrast for their smaller screens.
          Another thing to think about is printers.  This should be on your device lab because people still print things and you want to make sure that everything looks good when it's printed.  And everything might be in black and white sometimes, or it might be printed in color but the background color is weird or something like that.  But you really should be thinking about this.  And you can easily do print style sheets.  We've been able to do this for a very long time, even before responsive design, and you don't need to do this as you're putting a site together can be something you do at the end.  Just get your site working, make sure you get everything done, and you'll probably need to change a few for things print to make look okay.
          I went to a recipe site recently, and I wanted to print a site, and it was 28 pages with five pages of navigation, which is really bad, you know?  And the site, it did have a little print icon, but not everybody sees that.  They just hit control print because they're used to doing that like I did, which is sad because it's so easy to go in there and fix this.
          So the other thing I'm going to talk about how colors look on the screen really quickly is a few things you can do to make it easier to work with color such as using Sass.  And one of the things is color variables.  It's the most basic thing in Sass, and you're just using a variable, which starts with a dollar sign, so you might call it dollar sign green, and then you can you say that variable in your CSS instead of typing the same hex number over and over again.  And that makes it certify if you need to change a color later on, you can only change it in one spot instead of doing a search and replace.  You can doing do it based on the color and the usage and there's a lot of theories on how to do this, which I won't go into it.  And there's Sass functions such as light and dark to change the hue.  So, for example, light and function, I just have lighten, color, and the percent I want to lighten it, and then you can change the color.  You can do the same thing with darken to get a new color.  Saturate and desaturate.  Gray scale.  Or inverse to get the inverse of a color.  And there's a lot of other functions you can do.  This is just the tip of the iceberg.
          Blend is another thing you can do in CSS, not in Sass.  It's pretty interesting.  It's newer in CSS, background blend mode is actually the name of the property.  And what this does it blends a background image with the color image in front of it.
          So you start with a image, here I have background images, and then I have a background color, I've picked purple, and then you pick a background blend mode, and there's a lot of different options, so you start with a picture like this.  Pretty normal.  And this is what I get with the code, because it's taking the background picture and multiplying it with the purple that I chose as a background color.  So you get basically a picture that's very purpose pell.  There's a lot of other options you can use in blend mode.  Here's just a few of them.  Screen, overlay, darken, lighten, color dodge, these might sound familiar because they're the same options that you can use in applications such as Photoshop to change the lore of images.
          Believe this is nice because you do the same thing in CSS without using the same image.
          And the good thing about this, though, is it's not supported in all browsers, it's supported in Firefox, Chrome, and android, and I it's not supported in opera are yet.  And this is something cool you can do.  You don't want to rely on it for the basic function for your site, but just as a added thing.  If you want to hover over an image to change the color of it, you could do that with this CSS property rather than having to replace it out with a different image.
          You can also do blend mode and canvas with SVGs.
          So going back to dorothy's ruby slippers.  I showed you a couple cool tricks with color, but what I want you to get out today is how you think of color.  And dolor color has the ability to transform the experience, and it's not the experience, and we need to place so much color on importance on what color we put on the website because not everybody is going to see the same colors.  We already know with responsive design, we need to change the layout to make a site work well in different screen sizes, but we're still set on these colors, we pick a color in Photoshop, and we want it to look exactly the same in every device and context.  But that's not ever going to happen.  So we need to provide an optimal viewing experience across devices, not for everyone.  And we need to get out of this mind-set and provide a experience to provide color so that we can make our sites look good for everybody.  Thank you.
          [clapping]
          >> That was amazing.  No fury like a for-instance CSS.  Style sheet.
          How many of you have had to write a print dot CSS?  It's miserable.  It is the worst thing.  Necessary I mean.
          So now I have to ask because I'm a big fan of the Wizard of Oz, but which Wizard of Oz character for president?
          >> Dorothy I guess; right?
          >> I'll accept it.  A good answer.
          >> So Clarissa is moving.  Right now she's based in Montreal, that's also in Canada I'm told --
          >> Well, at the moment.  But there's a lot of people who are trying to change that.  I haven't checked the news yet today.  I think it's still in Canada.
          >> Nice.  Hopefully you're not displaced by the time you get home.  But you're moving to.
          >> Yes.  I'm excited about this.
          >> Is that closer or further away from the Pacific Northwest.
          >> It is closer.  It is an eight-hour drive from Vancouver.  Road trip.
          >> I want to say that's not bad.  But it feels really bad.
          >> Does it?
          >> I don't know.  I have a bad perception.
          >> Right now I'm an eight-hour drive of New York, so I'm replacing my road trip.
          >> And we talked about this earlier, you drive to New York to Trader Joes.
          >> I drive to Albany.
          >> See when I drive to Calgary, it's still going to be a seven hour drive to trader escrows, so I don't know what I'm going to do.
          >> You're going to have to -- I mean we're going to have to ship you things.
          >> Well, if you ship things, you have to pay the taxes on them, and it gets really expensive.
          >> How badly do you want Trader Joes is the question.
          >> Yeah.  Well, it's just the tradeoff of the seven hour tradeoff with the taxes.
          >> You're way too practical.  All right.  I mean that's all my questions.  Is there anything you want to plug?  Your book maybe?
          >> I have a book out, it's called learning responsive design from O'Reilly.  It came out last year.  And it's actually -- it's not a book for developers, so maybe not all of because there's a lot of books on responsive design for developers, but there's not a lot of books for the developers on the team like the designers and the project managers and designers and the IT director and whoever else needs to know what's going on with responsive design.  So if you're trying to get them to understand what needs to happen, it's a good book for them to read.
          >> That's awesome.  Good stocking stuffer.  
