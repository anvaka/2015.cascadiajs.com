      >> Do you want me to read the first line?
      >> Yeah.
      >> Z index, zero.
      >> Z index 75.
      >> I think I fixed it.
      [Laughter]
      >> Pretty solid.  Cool.  Thank you.
      >> Thank you, Shay.  So our next speaker is going to talk a little bit about type.  If you're a designer and developer or just a designer?
      >> I'm a designer.
      >> Everyone goes through a little bit of an identity crisis; right?  Or maybe it's just me.  I'm sorry.
      >> No.  I think you're; right?
      "Efficient Web Type, c. 1556".
      By: Kenneth Ormandy.
      >> Join me in welcoming Kenneth to the stage, please.
      >> Thanks.
      >> If a developer I'm working with asks why did you select that for not?  It's pretty unlikely they'll select self-preservation as my answer.  Type designer may actually been able to get away with this claim.  He lives and works in Paris during the mid-20th century and how the type he designs how efficient it is spatially on the page is actually much more relevant to his personal safety than it is for his contemporaries.  The work of type designers today, people who design fonts professionally is still linked to the 16th century craft people called punch cutters.  While type is designed or revived more recently, ones you might be using on screens today, probably started their life as a sketch and worked onto digitally quickly, and a book starts its life in steel.  Having to print, publish type in this manner is a more routine roll in what we call the design progresses relevant process.  His skills allow him to get type graphic.
      It's no longer the cutters or type designers who the soul responsible for the type.  This group has expanded to include typographers working on the Web.  And whether you see yourself this way or not, you probably are a typographer.  Well, type designer is the name given to type designers themselves.  This means that designers, developers, writers, or anyone replying to tweets instead of listening to my tops, couldn't have anticipated back when it was being cut out of metal.
      And whether we take on the title developer or software engineer or something else entirely, we still have a similar question to the 16th century punch cutters.  Mow may a text be received and read more efficiently.  We can continue to subject anting to this on the Web by making most of the existing practices we have, taking advantage of the up coming technologies and using the punch process for having a role in Web confers.
      These may not sound relative willing new, but he's working on the Bible.  Historically religion has driven letters, design, and communication in general.  The first mechanical press was printing 100 years before haul teen's working, and as he.  Prints the Bible, it's the fastest book ever produced.  So what could possibly make printing a Bible ail challenge an entire century later?  Certainly he knows how to create effective work, and this is not where his problem lies.  His ability to print, publish, and type means he's more than capable to work on a new Bible.  It comes from a secret that he's keeping.  In addition to being a printer, a publisher and a proficient print cutter, he's also a Prodistin.  It's a branch of Christianity, and largely for his own safety.  Through improvements in printing technology and secret promotional efforts of people including haul teen, Catholics are increasingly converting to Paris and this does not sit well with the most powerful Catholics in the country.
      They're unimpressed and impose a recession in Paris, one that's under king Henry the second.  Now, this is a religious disagreement and I'm sure there's plenty of people who could be blamed got it, but it's hard to see the person king.  He gets a lance through the face about three years from now if that makes you feel any better.
      But in the meantime this is the position he he finds himself in, with his practice in faith but he's doing death.  Like many designers and developers today, he builds his own problems and as the religious climate grows worse so do his design of the Bible itself.
      I first became interested in his stories through the books the paleotography by HDL, and counterpunch by Fred Smeyers, he speculates what's going on in his life, but I prefer he would like to ask god more directly.
      Why do people keep making these and large heavy Bibles he probably prayed?  I need to be able to pick up my things and move quickly.  I don't want to be discovered practicing my faith, but how might I make these books smaller?  Thinking through this or define intervention leaves him to design what couldn't be considered the first French language pocket Bible.  He's constrained by how small the type can be by remaining easy and desirable to read.  It's spatial deficiency on the page determines how small this Bible can be.  A tight face that reads well at sizes means less pages to print, a more economical number of characters per line, and he approaches this problem by experimenting with the extreme parameters, something that's still common in type design today.  Here a fairly bold weight of a type and lightweight have been designed so that the middle weights can be interpreted in between.  And working with these extremes is something he does as well.  He's actually technically skilled enough to cut a face that's too small to be able to read properly.  But by over shooting his boundaries, he's able to find new approaches.  And this is incredible difficult.  Remember that 10 point type is completely different object than 12 point.  He's working at scale, he has no tools to help him zoom in.  He has to actually make this by hand.
      He's able to test his decisions along the way by doing this as well.  He holds his tools, his molds, his punches over an open flame and eventually finds the spatial sweet spot for this face and could print a gorgeous inconspicuous Bible.
      His performance issues and type design mirror are own issues on the Web.  How may a text be received and read more efficiently?  That's not the only place this question needs an answer.  Less often they are in the Bible and more on the Web.
      However you may be references fonts on the Web, writing your own for not face declarations or using a going to believe fonts, it's clear you are referencing more fonts.  The adoption of for not face and the Web open for not format has been rapped.
      The services also make it less likely that you're writing these for not face declarations manually.  But when you drop it into a CSS or JavaScript snipit from one of these services, you're still getting a service sheet back, so let's see how it works with CSS.  First we want to specify the name we want to use elsewhere.  And then the style, the for not style, in this case it's normal.  And then the for not weight, which in this case is 300 because that corresponds to the lightweight of the tight face, which is the version that we're loading in.
      In 2019, the format's biggest challenge was adoption.  Its goal was firmly establishing a true way of the Web, and thanks to the group and many other people, it's safe to say this happened it happen there's been a huge increase in Web for not usage from 2010 -- actually this doesn't seem sufficient, 50 percent of fonts are using fonts this year.  And I think the poster child for this is a tight faced release in 2011 but is now more common than top sites, which is a commonly sanctioned for not in some settings.  And here's some things that happen less often per day.  Treatments of a top YouTube video, the number of Facebook photo uploads in a day.  500 million tweets in a day is a lot, but it doesn't come close to the 2.45 billion fonts views that Google reports, and this doesn't factor in the self hosted versions or the other for not services.  Now, keep in mind as much as a statistician, which is I'm only interested in it when it comes to typography, but I'm saying chill out with the open sands.
      And, yeah, maybe this.  That we can really call Web fonts and their adoption a success, but we also brought along some performance issues because of this.  We're building sites that request more for not, we have an eight kill bite average in 2012 and gone up to 59 average.  And to mitigate these generates and subset fonts, removing any characters that are deemed to be unnecessary, regardless of what the type designer originally intended.  While sub-setting is often worth wile while, it also imposes many limitations that aren't immediate obvious, and this is what concerns me more.  This is something I disorder while working on CSS, the name stake means to provide sound, CSS defaults across browsers but specifically for advanced features that are offend ignored.  With you can replace collisions like this between the F and the I that's included in your for not instead and headings you can also enable discretionary ligatures to have a bit more of a flow for titles.  When you have breezing in your text, you'll often have a multiple upper case letters, but this can be distracting in long form reading and draw your attention away from what you're supposed to read next.  So normalize will take advantage of small caps than lower case letters.  This is also true for numeral styles and you can see that the old styles will line up with the lower case rather than the upper case, and there's a bunch more features available, and here's an example in use in the Vancouver typography website.
      And also to take advantage in script typefaces.  This is James from co-op, and these -- this is the same face but by changing the features we're using, we can create a different character from that face.
      Some languages actually require open type features display properly.  And that also needs to be taken into consideration.  Because those browsers inconsistency I was worried about, being subset out before they reach your browser, before you could ever use them in the CSS.  We're expecting more and more on the Web, but aggressive means cutting a face down onto only to support some languages by default.  And while it's not practical to include everything, it's an issue we need to be aware of.
      When writing and speaking about performance problems on the Web, ones like these, it's often common to present them only within their immediate context.  But the truth is that many people have been works on problems like that for a long time and many of those people were actually designers.  We saw how in the mid-16th century resolved inefficiency through his work horse like themselves, but the same intervention last impactly of.  And a highly type designer responsible for making both Georgia, so I imagine you're familiar with his work.
      And the efficient type in the mid-1980s where fonts were taking up a lot more data than other tight faces.  And the memory on those devices was extremely limited.
      I made them at a straight line segments, brackets.  And, look, as economical in data as a sand.  We call it charter on the right.  So I went to the head of engineering with my numbers and said prowled, I have solved your problem.  Oh, he said what problem?  And I said, well, you know, the problem of the huge data you require for fonts and so on.  Oh, he said.  We solved that problem last week.  We wrote a compaction routine that reduces the size of all fonts by order of magnitude.  You can have as many fonts on your system as you like.  Well, thank you for letting me know I said.  I said filed again.
      >> Matthew Carter still goes on to create amazing tight face, but it's true that the engineers manage to compress every for not on the system.
      We're now on a similar position on it.  The desire has a roll to play in Web performance, but solving our own performance problems within the type itself as Carter pursued for other ends, no longer has the same impact.  The intervention must come from the system not from the implementation of the for not.  Thankfully the Web for not group knew this, and with the adoption, they were able to turn their intention with the refining of the implementation and their result is called WAP2.  From a technically perspective, it sounds a little bit too good to be true.  What tucked continue to use the same interface you're already familiar with?  For not face or for not service?  But you could request it to be significantly smaller in file size.
      Well, this is possible because of an algorithm applied to files.  This is a lossless algorithm that uses a bunch of compression Keck tech next week that I'll probably never understand in my lifetime.  It provides deterrence compression while canning I a deeper compression rate, even on mobile devices.  What we're interested is in the outcome of our readers.  While testing this, the fonts ran various catalogs through this algorithm and they found a 14 percent improvement rate on the catalog, and the 27 percent improvement on the remainder of the catalog.  That was on the catalog where they saw 25 point and non-Latin type paces bases, the best was a 60 percent improvement.  So I think there's significant potential here for non-Latin scripts and languages on the Web more successfully.
      And one of the best things is really about the for not face.  The for not face multiple formats simultaneously.  So we've been though WAFT2 is new, there's no syntax in CSS itself.  You may have seen this feature of for not face used to provide for not back fonts.  Here we're holding an impended type for not for moral turpitude versions of Internet Explorer, but when the processor relevant browses relevant browser doesn't support that, it falls back to a file to older versions of android as well.
      Now, in practice, unless you have a very specific support requirements, I don't think you need to worry about anything except WAF anymore.  But in the same way, we can optimistically support new formats as well.  In this example if it supports WAF2, the 2 will be requested and instead it will backstabber to the original instead.  And if you're using a service to provide fonts for you, a CSS is already being generated when you drop in a link tag like this, and that's what's being requested.  So it may mean you're tried to use WAF2 today and you may not realize it.  At the end of 14, Google fonts started experimenting with this.  When you drop in the JavaScript, you can see it's actually just requesting a CSS file and when you go and inspect that CSS file, you can see they're presenting the WAF2 files, and they've enhanced that across all Google fonts.  So you're already loading WAF2 files if the browser supports it.
      Now, if you're self hosting your fonts, you can generate WAF2 as well.  Google has their library on GitHub, and or if the command version isn't appealing to you, you can use for not squirrel, just keep in mind the other options but these will convert to other for not formats.
      Now, if you're self hosting fonts, it's important that you check your licenses and we know what the license permits.  But many founders and distributes are formed by teams, and getting in touch with them and asking them for you to build WAF files isn't unrealistically.  But I think it won't be a problem once interest is shown.  It's also a great excuse to talk to the person who designed your fonts.  Now, browser support has been one of the only drawbacks, since Chrome 36 and opera 23 and Chrome 37 on android.  But as a few days ago, Firefox has it enabled by default now, so I'm super excited by that because it's not under a development flag.  And also on their voting chart, which is more than I can say for Safari.
      WAFT2 is definitely good of taking advantage of if you haven't already.  And hopefully we'll see more take advantage of WAFT2 as well.
      And as Matthew Carter discovered, somewhere engineers are capable of making these massive performance promised at the level of the system, sometimes rendering our one off improvements seemingly impactly of.  But I see WAF2 an opportunity to see what's important.  With files there's dramatically smaller, there's an opportunity for designers and front-end developers and other optimizations instead.  So these are some things that you can do on your site in a in addition will make your site feel faster.  My first recommendation is to stop using the CSS approach that services often recommended recommend.  They'll give you a link tag but when we consider perceive performance, it's what might be choose as a advanced opposite or JavaScript option because this will give us the call we need to influence how the Web fonts are loaded.
      And most of the time this is actually using type kits, Web for not lowered, which is may understand by Brianstein.  And so even when you're loading in Web fonts from different services, it's still probably using the snipit, so they're still probably using this library, so it's worth checking out using it directly.  And as an exercise I just wanted to show you some of the things you can do when you're trying to request fonts from visa services.  So let's load in Charlie and echo.  And fonts.com.  And type together via type kit.  And James T Edmondson from lost type, which will self host, and then open sense Hebrew from Google fonts.  So if you wanted to load all these in separately, they would give you a JavaScript snippet, which is probably using the Web for not lowered.  But by using this library directly, you can get the fonts if you need Google type kit, type fonts.com, self hosted fonts, and services that provide CSS style sheets.
      Now, of course you wouldn't want to load all these fonts all at once, but the Web for not lowered will let you take care of that.  So if we say echo is the most important, it will load that first and then defer the others until we need them.
      And it's also possible to load the one for not lowered, and this salary good idea because it provides the opportunity for a flash of unstyled text.  And, yes, this is an opportunity.  As Tim Brown points out, viewer typography should be on principle enhancement.  That a text itself is fundamentally more important than suggestions of how it should be typeset.  And this is a painful for me as a typographer to admit, but if we truly want our type to be reflecting the content properly.  We have to prioritize the content at sometimes when the connection is poor.
      So the default script look like this, and it's available in the Web for not, but you can also look at using the Async attribute.  And if you're looking something different, there's a new article of the front face observer.  So if you're looking at something more up to date, I recommend checking that out.  It's a bit more lightweight as well.
      And that means our content can load and we're not necessarily going to wait for the fonts if you happen to be in some sort of situation where there's really bad Wi-Fi connection for some reason.  And additionally the flash of unstyled text is a feature and a condition that everyone should design and anticipate for.  Some browsers or some browsers until recently didn't even have a time-out for Web fonts build in.  So you could potentially be waiting forever if you chose to, which you wouldn't.  So with the Web for not lowered and for not face observer, you can set a time-out.  The default is three seconds to wait.  And at that point it will show the fall back fonts instead, but I recommend logo it maybe as low as 1.5 seconds.  And the reasoner for this, or something that this means is for not stacks don't matter.  This is something that I think we have forgotten about in a lot of ways.  When I see a for not stack like this, it makes me feel like I just got a lance through the face because for not is a property that has already had graceful built in.
      And when Google service recommends Web fonts, they give you the main for the and the category and that's it for the entire stack.  But if we're looking about roading in the fonts Asyncly, then we need a more compatible for not stack.  In this case I'm loading in android devices, and available on a lot of devices, not common, but it's good enough that we should use it, and near next on S devices.  So for geometric, which is what I've been using, it's more reliable.
      And if you want to make use of that work again, you can map it to a variable in your processor and use this across e-mail templates you may be making.  Web fonts are available in some clients, but their support is even worse than -- is.  Much worse on the Web, so it's important to have a really good for not stack for e-mail letters, and that's somewhere you can reuse that work.
      And spatial deficiency and enabled -- more contextual appropriate communication in his day.  Though, the issue is driving our optimizations are not always dire, they're perhaps more relevant than ever.  It's clear there's a need and a precedence for designers improving type graphic performance problems.  And by looking ahead to new technologies, WAFT2 and the inheritance it was brings, and taking the opportunity to establish other practices in the meantime, like, using for not family for a fall back and the Web for not lowered.  We can make our own suggestions at how a text might be received and read more efficiently.  There's precedence for designer's role and type on the Web.  Now, too often when we present our work be with it just easy to caught up.
      And I'm as guilty as that as anyone.  And to me there's something that we need to remind ourselves, that we're improve our communication.  Or just trying to make your fonts load a little bit faster.  Thanks.
      [clapping]
      >> That was really awesome.  Wow I just walked right into that fake tree.  All right.  I have so many questions for you.  I won't kill you.  We're going to take a quick break after this.  So that's exciting for everyone who is low energy.  I also felt like your entire talk was, like, broken up into haikus, like, you had such poetry.  And how many people from Vancouver in the house?  So I've always wondered what's it like to be Canadian?
      [Laughter]
      >> I don't know what it's not like.
      >> Well, like, just look at me and then, like, whatever not that.
      >> I don't know if I can answer without seeming like I'm saying something mean to you now.
      [Laughter]
      >> I'm on the Internet.  I'm so used to people being mean to me.  Like, that's not an unknown thing.
      So someone in the audience wants to know what the -- and I quote groovy type you used for your presentation was.
      >> I think the main headline for not is soleil, which is available on type kit.  There are other ones like real from John Hudson, who is in greater Vancouver.
      >> Shout out to you.
      >> And it's on my website, so you can check it out there.
      >> And a lot of things people don't know, back in the day during printing presses, it was a dangerous job, people lost fingers and everything.
      >> Yeah.
      >> So I just want to take a moment to let everyone know that our jobs are not in dangerous.
      >> Yeah.  More common with gold Smithing and blacksmithing for a lot of people thing.
      >> Definitely bad ass.
      >> What do you think about doing a haiku with me?
      >> Yeah.  Sure let's do it.
      >> On your own?
      >> That's a lot of pressure.  You take the lead and I'll --
      >> Sweet.  This is one of my personal favorites from the day.  Do you want to do the first line and I'll do the second lane?
      >> Darkroom of strangers.
      >> Badges made from tree corpses.
      >> CSS is Goth.
      >> Thank you, Kenneth.  Can we give him a round of applause?
      [Laughter]
      >> So we do have a quick break if you guys want to jump up.  Grab some coffee, use the bathroom, I think we're back here in 10 to 15 minutes.  
