      >> That was fantastic stuff.
      >> Thank you.
      >> I was especially impressed by the typewriter.  That was super cool.  Awesome.  All right.  While we get set up.  Just one more round of applause for David.  Thank you.
      [clapping]
      >> So many cool demos today.  I love it.
      "It's not me it's you: on the fallibility of large systems."
      By: Myles Borins.
      >> Next up we have Myles Borins.  He is the head of famous.org.  He comes to us from Toronto by way of San Francisco where he is right now.  Kind of know Myles through the Internet, which is super cool.  The JavaScript community in San Francisco is so strong and very welcoming.  We actually do a lot of node school stuff together, which are has been a great opportunity to meet some people in the community and also teach some stuff.  So that's a real cool thing that we get to work on together.
      All right.  That's interesting.
      >> I know that one.
      >> You know that one?
      >> Hello.  Is this on?  Can everyone hear me?  Round of applause for Lydia?
      >> No, for Myles.  Come on.
      >> So it's almost lunch and we're hungry.  I'm going to hop into it.  Today we're going to talk about marketing.  What you're going to see up here now is the classic conversion funnel.  True story I found this on LinkedIn.  Has some, you know, points about how you can convince someone to buy something, and I'm going to be using this conversion funnel right now to convince you why you should pay attention and listen to me.
      Well, you probably shouldn't -- no, there we go.  So what do I do?  I'm an artist.  My background, my under grad was in fine art.  I studied mixed e-mail relation art.  Worked with a number of systems while doing so, from embedded systems like the beagle board working with electronic components to software systems to build interactive experiences.
      And I'm also a mousse I guess.  You'll see me performing on Friday night when we do dance JS.  I studied music technology on my masters.  Studying the music system on computers all the way from how we encode sound in audio codex to how we create interactive audio collaborations to more installation art and straight up performance, which is a lot of upon fun.
      I'm a developer.  I have an open source graph, which is not as impressive as some of the people out there, but I'm pretty proud of the work I do.  I get paid full-time to work on open source, which I'm grateful for.  I work on a number of different systems, bug fixes across all different things that start to get weird as you start coding more and more, you learn these things.  I'm also a legitimate public speaker, otherwise I wouldn't be up on this stage right now.
      So why should you care about systems?  So any given element of one system is simultaneously an element in an infinity of other systems.  This is from the boom book of systems Bible by John.  I've got it right here.  This book is really interesting I found out about it recently in a thread on Twitter.  And I've had this really interesting way that I've been reading the book.  Throughout it, you can't really see, but come and find me throughout the conference, and I'll show you.  There's all these bits that have bold text.  And it's just filled with wisdom and right now I can show you, like, extra brain and tail, tail wags on its own schedule.  That's a pretty good systems quote.
      Another great one.  Let's see.  The automatic pilot is not much help with hijackers.  So this is how I've been reading the book.  I've actually been handing it off to people and having them read it to me, and it's pretty entertaining.  It's own system in trying to figure it out.  But I'm going to sprinkle in some wisdom in from this book as we go in and learn about systems.
      But one thing that's important to think about is when we write code, we create systems.  I often like to think of large software systems as kinetic art.  Every piece in the system needs to line up perfectly for it to work.  If any part of that system breaks, you're going to have a really, really bad time.
      This was a really important lesson for me to learn early in my career.  Sometimes you can be writing absolute perfect code, and it just won't work because the problem lies somewhere else in the system.  As beginners, we often think that there's no way that smart.  Everyone else who saw this code is coming from the sky, and it's handed down to us.  But the scary part is that just because there's lots of code running, doesn't mean that everyone who wrote that code knew what they were doing either.
      So how do you believe me?  So we're going to start -- you know, I think I'm just going to give up on this thing.
      I'm going to start with an instructive antidote.  I work on a open source platform, and one day I came into work December 1st, 2014, to this amazing GitHub issue.  Basic demos failed in Firefox.  Spinning demo is wrong.  It is signing but the size is changing.  It is decreasing to zero and back to normal size and what it's running on.  And so I actually through the magic of versioning have Firefox 34 running right now so we can see exactly what this bug looks like.  It's not supposed to do that.
      This was my immediate reaction.
      [Laughter]
      >> So I immediately assumed that we did something wrong.  I tried testing an older version of the seed project, which we've got going on right here, which worked.  And then that really broke my broken, and the new one didn't work, so I immediately thought we didn't something wrong and we had some nasty aggression since we introduced the platform.  And this time I was the release manager, so it probably would have been my fault.  So I went directly into the CEO's office and told them we might have to push a hot fix, the sky was falling and everyone was broken and I would have it fixed by the end of the day even if I had to stayed hello analytical 4:00 a.m.  And the difference was one was using an N VG and the other was using an SVG.
      So it turned out that we didn't do anything at all.  Our code base, you know, like, it's got lots of its own bugs, but it wasn't a bug in the demo.  It turns out that Firefox released 34 on December 1st.  And Mozilla released it, and when they released it, they had this aggression that got released in SVGs.  And it was CSS on SVG with maintaining width and it way weirdest thing ever.  And, yeah, that's so odd.  So we opened Mozilla issue.  And they introduced a bug fix within ten days and January 13th, about a month or ago later it was Firefox 34, and it was fixed.  But what was challenging about a month and a half anyone who was writing code against the spec in Firefox 34 would get a broken result.  And I don't know, but I can just imagine that developer who thought of this amazing thing to do with SVG and they've never done it before and they were sitting up until 7:00 in the morning because it wouldn't work and they thought they did something wrong, but it didn't.
      So as systems grow in size and complexity, they tend to lose basic functions.  Sadly true.
      So this brings us to where we begin.
      And what we're going to begin talking about is Chowkidar.  What is a Chowkidar?  Can I get any hands?  Does anyone know what it is?  Anyone played with one?  I see a couple of hands.
      It is not one of these.  For a while, like, you may forget what the name of the middle one is.  It's Chameleon.  It's not Chowkidar, it's a rapper around the Node.js, FS watch and FS watch AI.  And if you've ever used Watchify, so if you're a browser developer, this is in your stack.  You're dealing with this every day, and you very well could have had the same experience we had.
      But before where he start getting into when I almost went mad, let's talk about why Chowkidar actually has to exist.  So why do we have to rap FS file watch?  Because file watching on OSX is not standard.  Yeah.  I don't really know what that means.  But I copied this -- and I know a little bit because Forest Norville sat me down and explained it nicely.  But it's in their design to uniform system API with his so that across Linux operating systems things are consistent.  So something like reading files should be consistent against every flavor of Linux.  But OSX decides to not exactly follow that standard to a T.
      This is a really great phrase.  So I didn't think I knew enough about POSIX to give you something to awake away with.  And I didn't know ho to you prisons it, but this phrase I'm sure POSIX is a good way how to pronounce it.  So for the advance of JS, I believe that dealing with platform specific nuances.  So it's actually not in lib UV to patch some of the problems with OSX because of its nonstandard clients.  So the consequences of this in the node layer is that file is watching pull base.  You have to pull the file to see if there's a chance.  It doesn't report file names, it doesn't pull reports at all -- I kind of want to vent when changing codes.  It often reports invents have twice, and do not provide as a rename event, and does not provide file frees Tries.  And then FS dot watch file is almost as baptized adds every night handling.  And it results in high CPU utilization.  So none of these are really great.  So we end up with, like, all these layers; right?  We have a native file system watching layer that's not POSIX compliant.  We end up with a layer that does nothing special with OSX, and we create SF events, which is a native rapper, which raps the exposed by OSX, and then that gets rap by Chowkidar to shim events when necessary.
      It's kind of crazy.  For those of you who are having a seizure, this is slightly better diagram to understand what I'm talking about.  So you can see here, Watchify is using Chowkidar, and then it's going to skim FSM events and goes directly to the native file watching standards.  Otherwise you go straight to the Node.js watching on Windows or most flavors of Linux.
      So this brings us to another quote from the system's Bible.  Every picture tells a story.  But not the same story.
      So let's go back in time a bit.  Our team uses browserify and Watchify on if all the things seed projects, internal tools.  So when something goes wrong with browserify and Watchify, I find out pretty quickly.  We also are using a lot of different modules.  Because modules are cool, and we use NPM link to wire them up.  So you can see how these systems get really crazy and complex.  So if we're working on our platform, we'll NPM link the platform into a manual.  We're actually creating stuff and that's where we can make changes and and get pushing and all that fun stuff without having to jump around a lot.
      The problem with this is this makes a ton of symbolic links.  So one day everything at work decided to stop working.  Our developers came to me and are, like, for the last week, I've had to restart the DEV server literally every single time at some point or I'm not getting changes.  So it turns out that symbolic links just stopped working in Watchify one day, on November 12th.  That was a lot of fun.  So I started doing research, and it turns out that symbolic links never worked in Chowkidar at all.  There's been an issue that's been open since 2012, but my team saying everything had been working since about a week ago.  And a few weeks later it was actually figured out that Node.js made a change to the way that FS watch and FS watch file works so that it would find the true path to things.  So it actually worked by accident for a little while.  So if you were using FS events, if you were not using FS events on default, it just worked but it wasn't supposed to.
      So now we've got this feature that we were relying on but was technically never supported.  So I created a little utility called WATU, and I don't know if any of you are marvel comic fans, but this is the watcher, so I created a metawatcher to watch all the watchers.
      So it's a test sweep that wrote explicit little watching commands like those, this is just the example of going straight into FS events where I tested changing files directly, changing symbolically linked filed, doubly linked symbolically linked files because if you're NPM linking, how it is that's it how it does it because the links from the module into the global and modules folder.  And from there your project.  And it's a lot of links.  So this test sweep would go through and run these tests against FS events, and I was able to pretty much come to the conclusion Chowkidar is definitely the ones that's Chowkidaring.  It was around this time in the office we would constantly hear people screaming with Chowkidar.  It's -- well, you should try sometime.  It's a lot of fun.  So I found a version of Chowkidar that worked, which was 0.81, by running this test sweep.  So I found a way to use the test sweep to actually find the command that broke everything.  So I don't know if I of you have used GIT bisect before.  It allows you to commit hash that works, and a commit hash that's totaled borked.  And it uses a search to hop along the history and you can use flags that are working and not working.  So I new a version that worked and a version that didn't, I was -- I symbolically linked Chowkidar into my test sweep and then I ran GIT bisect in there and I was able to make a really quick script that would find the last commit where the test sweep passed.  And I found it.  I found the exact commit where everything broke, and I posted that online.  And the current maintainer, I'm going to read this a bit.  Because this was actually the ultimate irony.  What I found was not the bug I was looking for, but it was a bigger bug than anyone knew existed.
      What it has uncovered is actually a different issue.  When there's a similar link somewhere in the past structure leading up to the project being watched within symlinks within a project and do not get seamlessly followed either.
      Long story short, they're using an interesting away of using cache validating inside of Chowkidar.  When you gave it to the file watcher and there were changes, it would have the full path.  So it went to go into the hash to see what had been cached, you were getting all these events.  And this cascaded into some really interesting stuff.  So the first thing was this fix that we didn't think was going to be easy, ended up being really, really easy.  And this fix that was open for two years was fixed in two days.  And Watchify was working again, and we closed a two-year-old issue.  But with a slight caveat, symlinks support is looking pretty good in the master ranch.  The symlinks specific tests fail on Windows, but I suspect there is on anybody that's going to care.
      And then another quote from the system's Bible.  In order to succeed, it is necessary to know how to avoid the most likely ways to fail.  And that's a lesson that I've learned the hard way a couple times.  So it's important here is to not forget that you're always in a system.  Everything that you're writing is living somewhere in, like, this massive crazy stack where people have made all sorts of decisions and made not necessarily being made logically or they may be made incorrect.  And the reason it stopped worked working in Chowkidar is because it never worked.  And they refactor it, they never followed that edge case because it was part of the support matrix.  So there's all these people relying on it.  Don't forget you're in a system.  Don't assume that you are wrong.  Someone else is probably wrong.
      So I still have about seven minutes on the clock and there's another an thing I can talk about, so I'm going to end a little bit early.  Again, I'm Myles Borins, if you have any questions about systems or you want to readme a section from the Bible or if you want to hear my last antidote, which has to do with why MacOSX files systems are not -- I'm not even going to get into it.  I'll go nuts.  But thank you so much, everyone, and have a really nice day.
      [clapping]
      >> Two quick announcements before we all go get lunch.  Workshops.  There are workshops going on.  Go check them out if you're interested.  There might be still space, clap once more for Myles.  Announcement number two.  Lunch is tacos.  It's sponsored by sauce.  Yay, sauce, I love tacos, you love tacos, let's go get tacos.  Bye 
